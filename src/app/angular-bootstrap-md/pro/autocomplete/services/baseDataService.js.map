{"version":3,"sources":["../../../../../src/app/typescripts/pro/autocomplete/services/baseDataService.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAIvC,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAEnC;IAAgD,qCAAwB;IAQpE;eACI,iBAAO;IACX,CAAC;IAIM,kCAAM,GAAb,cAAkB,CAAC;IAEZ,wCAAY,GAAnB,UAAoB,YAAoB;QACpC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,sCAAU,GAAjB,UAAkB,UAAkB;QAChC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,4CAAgB,GAAvB,UAAwB,gBAAwB;QAC5C,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,sCAAU,GAAjB,UAAkB,UAAkB;QAChC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,yCAAa,GAApB,UAAqB,IAAS;QAC1B,IAAI,KAAK,GAAW,IAAI,CAAC;QACzB,IAAI,aAAqB,CAAC;QAC1B,IAAI,aAAqB,CAAC;QAE1B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,aAAa,GAAG,IAAI,CAAC;QACzB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACzB,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACpE,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACtD,CAAC;QAED,EAAE,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,CAAC;YACH,KAAK,EAAE,aAAa;YACpB,WAAW,EAAE,aAAa;YAC1B,KAAK,EAAE,KAAK;YACZ,cAAc,EAAE,IAAI;SACN,CAAC;IAEvB,CAAC;IAES,0CAAc,GAAxB,UAAyB,IAAW,EAAE,IAAY;QAAlD,iBAcC;QAbG,IAAI,OAAO,GAAU,EAAE,CAAC;QACxB,IAAM,YAAY,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QAC/E,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,KAAK,IAAI,IAAI,IAAI,CAAC,aAAa,KAAK,SAAS,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;YAChF,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAA,IAAI;gBACtB,IAAM,MAAM,GAAU,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,UAAA,WAAW,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,EAApC,CAAoC,CAAC,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC7I,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,EAA1E,CAA0E,CAAC,CAAC;YAC5G,CAAC,CAAC,CAAC;QACP,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,OAAO,GAAG,IAAI,CAAC;QACnB,CAAC;QAGD,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAES,wCAAY,GAAtB,UAAuB,IAAS;QAAhC,iBAOC;QALG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC;aAC7B,GAAG,CAAC,UAAC,KAAK;YACP,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC1C,CAAC,CAAC;aACD,MAAM,CAAC,UAAC,GAAG,EAAE,SAAS,IAAK,OAAA,GAAG,GAAM,GAAG,SAAI,SAAW,GAAG,SAAS,EAAvC,CAAuC,CAAC,CAAC;IAC7E,CAAC;IAES,wCAAY,GAAtB,UAAuB,GAAQ,EAAE,GAAW;QACxC,IAAI,IAAc,CAAC;QACnB,IAAI,MAAW,CAAC;QAChB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACN,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACtB,MAAM,GAAG,GAAG,CAAC;YACb,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACnC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACT,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7B,CAAC;YACL,CAAC;QACL,CAAC;QACD,IAAI,CAAC,CAAC;YACF,MAAM,GAAG,GAAG,CAAC;QACjB,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAES,0CAAc,GAAxB,UAAyB,OAAiB;QACtC,IAAI,CAAS,CAAC;QACd,IAAI,OAAO,GAAoB,EAAE,CAAC;QAElC,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAChC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAClC,IAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACP,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACvB,CAAC;YACL,CAAC;QACL,CAAC;QACD,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IACL,wBAAC;AAAD,CA7HA,AA6HC,CA7H+C,OAAO,GA6HtD","file":"baseDataService.js","sourceRoot":"","sourcesContent":["import { Subject } from \"rxjs/Subject\";\r\n\r\nimport { CompleterItem } from \"../components/completerItemComponent\";\r\nimport { CompleterData } from \"./completerDataService\";\r\nimport { isNil } from \"../globals\";\r\n\r\nexport abstract class CompleterBaseData extends Subject<CompleterItem[]> implements CompleterData {\r\n\r\n\r\n    protected _searchFields: string;\r\n    protected _titleField: string;\r\n    protected _descriptionField: string;\r\n    protected _imageField: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public abstract search(term: string): void;\r\n\r\n    public cancel() { }\r\n\r\n    public searchFields(searchFields: string) {\r\n        this._searchFields = searchFields;\r\n        return this;\r\n    }\r\n\r\n    public titleField(titleField: string) {\r\n        this._titleField = titleField;\r\n        return this;\r\n    }\r\n\r\n    public descriptionField(descriptionField: string) {\r\n        this._descriptionField = descriptionField;\r\n        return this;\r\n    }\r\n\r\n    public imageField(imageField: string) {\r\n        this._imageField = imageField;\r\n        return this;\r\n    }\r\n\r\n    public convertToItem(data: any) {\r\n        let image: string = null;\r\n        let formattedText: string;\r\n        let formattedDesc: string;\r\n\r\n        if (this._titleField) {\r\n            formattedText = this.extractTitle(data);\r\n        } else {\r\n            formattedText = data;\r\n        }\r\n\r\n        if (this._descriptionField) {\r\n            formattedDesc = this.extractValue(data, this._descriptionField);\r\n        }\r\n\r\n        if (this._imageField) {\r\n            image = this.extractValue(data, this._imageField);\r\n        }\r\n\r\n        if (isNil(formattedText)) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            title: formattedText,\r\n            description: formattedDesc,\r\n            image: image,\r\n            originalObject: data\r\n        } as CompleterItem;\r\n\r\n    }\r\n\r\n    protected extractMatches(data: any[], term: string) {\r\n        let matches: any[] = [];\r\n        const searchFields = this._searchFields ? this._searchFields.split(\",\") : null;\r\n        if (this._searchFields !== null && this._searchFields !== undefined && term != \"\") {\r\n            matches = data.filter(item => {\r\n                const values: any[] = searchFields ? searchFields.map(searchField => this.extractValue(item, searchField)).filter(value => !!value) : [item];\r\n                return values.some(value => value.toString().toLowerCase().indexOf(term.toString().toLowerCase()) >= 0);\r\n            });\r\n        } else {\r\n            matches = data;\r\n        }\r\n\r\n\r\n        return matches;\r\n    }\r\n\r\n    protected extractTitle(item: any) {\r\n        // split title fields and run extractValue for each and join with ' '\r\n        return this._titleField.split(\",\")\r\n            .map((field) => {\r\n                return this.extractValue(item, field);\r\n            })\r\n            .reduce((acc, titlePart) => acc ? `${acc} ${titlePart}` : titlePart);\r\n    }\r\n\r\n    protected extractValue(obj: any, key: string) {\r\n        let keys: string[];\r\n        let result: any;\r\n        if (key) {\r\n            keys = key.split(\".\");\r\n            result = obj;\r\n            for (let i = 0; i < keys.length; i++) {\r\n                if (result) {\r\n                    result = result[keys[i]];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            result = obj;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    protected processResults(matches: string[]): CompleterItem[] {\r\n        let i: number;\r\n        let results: CompleterItem[] = [];\r\n\r\n        if (matches && matches.length > 0) {\r\n            for (i = 0; i < matches.length; i++) {\r\n                const item = this.convertToItem(matches[i]);\r\n                if (item) {\r\n                    results.push(item);\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n}"]}