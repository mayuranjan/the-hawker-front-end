{"version":3,"sources":["../../../../../src/app/typescripts/pro/autocomplete/services/localDataService.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAE7C,OAAO,EAAE,iBAAA,EAAkB,MAAO,mBAAA,CAAoB;AAItD;IAA+B,6BAAiB;IAK5C;eACI,iBAAO;IACX,CAAC;IAEM,wBAAI,GAAX,UAAY,IAA+B;QAA3C,iBAaC;QAZG,EAAE,CAAC,CAAC,IAAI,YAAY,UAAU,CAAC,CAAC,CAAC;YACT,IAAK,CAAC,SAAS,CAAC,UAAC,GAAG;gBACpC,KAAI,CAAC,KAAK,GAAG,GAAG,CAAC;gBACjB,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACjB,KAAI,CAAC,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;gBAChC,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,KAAK,GAAU,IAAI,CAAC;QAC7B,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,0BAAM,GAAb,UAAc,IAAY;QACtB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,OAAO,GAAU,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5C,CAAC;IACL,CAAC;IAEM,iCAAa,GAApB,UAAqB,IAAS;QAC1B,MAAM,CAAC,iBAAM,aAAa,YAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAOL,gBAAC;AAAD,CA3CA,AA2CC,CA3C8B,iBAAiB;;AAqCzC,oBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AAEK,wBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"localDataService.js","sourceRoot":"","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { CompleterBaseData } from \"./baseDataService\";\r\nimport { CompleterItem } from \"../components/completerItemComponent\";\r\n\r\n\r\nexport class LocalData extends CompleterBaseData {\r\n\r\n    private _data: any[];\r\n    private savedTerm: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public data(data: any[] | Observable<any[]>) {\r\n        if (data instanceof Observable) {\r\n            (<Observable<any[]>>data).subscribe((res) => {\r\n                this._data = res;\r\n                if (this.savedTerm) {\r\n                    this.search(this.savedTerm);\r\n                }\r\n            });\r\n        } else {\r\n            this._data = <any[]>data;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public search(term: string): void {\r\n        if (!this._data) {\r\n            this.savedTerm = term;\r\n        } else {\r\n            this.savedTerm = null;\r\n            let matches: any[] = this.extractMatches(this._data, term);\r\n            this.next(this.processResults(matches));\r\n        }\r\n    }\r\n\r\n    public convertToItem(data: any): CompleterItem {\r\n        return super.convertToItem(data);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}