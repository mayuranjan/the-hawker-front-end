{"version":3,"sources":["../../../../src/app/typescripts/pro/alerts/toastrConfig.ts"],"names":[],"mappings":"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","file":"toastrConfig.js","sourceRoot":"","sourcesContent":["/* tslint:disable:no-inferrable-types */\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\nimport { ComponentType } from './portal/portal';\r\nimport { Toast } from './toastComponent';\r\n\r\n/**\r\n * Configuration for an individual toast.\r\n */\r\nexport class ToastConfig {\r\n  /** show close button */\r\n  closeButton?: boolean = false;\r\n  /** time to close after a user hovers over toast */\r\n  extendedTimeOut?: number = 1000;\r\n  /** show progress bar */\r\n  progressBar?: boolean = false;\r\n  /** time to live */\r\n  timeOut?: number = 5000;\r\n  /** allow html in message */\r\n  enableHtml?: boolean = false;\r\n  toastClass?: string = 'toast';\r\n  positionClass?: string = 'toast-top-right';\r\n  titleClass?: string = 'toast-title';\r\n  messageClass?: string = 'toast-message';\r\n  /** clicking on toast dismisses it */\r\n  tapToDismiss?: boolean = true;\r\n  /** the Angular component to be shown */\r\n  toastComponent?: ComponentType<any> = Toast;\r\n  /** Helps show toast from a websocket or from event outside Angular */\r\n  onActivateTick?: boolean = false;\r\n\r\n  constructor(config: ToastConfig = {}) {\r\n    this.closeButton = config.closeButton || this.closeButton;\r\n    if (config.extendedTimeOut === 0) {\r\n      this.extendedTimeOut = config.extendedTimeOut;\r\n    } else {\r\n      this.extendedTimeOut = config.extendedTimeOut || this.extendedTimeOut;\r\n    }\r\n    this.progressBar = config.progressBar || this.progressBar;\r\n    if (config.timeOut === 0) {\r\n      this.timeOut = config.timeOut;\r\n    } else {\r\n      this.timeOut = config.timeOut || this.timeOut;\r\n    }\r\n    this.enableHtml = config.enableHtml || this.enableHtml;\r\n\r\n    this.toastClass = config.toastClass || this.toastClass;\r\n    this.positionClass = config.positionClass || this.positionClass;\r\n    this.titleClass = config.titleClass || this.titleClass;\r\n    this.messageClass = config.messageClass || this.messageClass;\r\n    if (config.tapToDismiss !== undefined) {\r\n      this.tapToDismiss = config.tapToDismiss;\r\n    }\r\n    this.toastComponent = config.toastComponent || this.toastComponent;\r\n    this.onActivateTick = config.onActivateTick || this.onActivateTick;\r\n  }\r\n}\r\n\r\n\r\nexport class ToastrIconClasses {\r\n  error?: string;\r\n  info?: string;\r\n  success?: string;\r\n  warning?: string;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\r\n/**\r\n * Global Toast configuration\r\n */\r\n\r\nexport class ToastrConfig extends ToastConfig {\r\n  /** max toasts opened. Toasts will be queued */\r\n  maxOpened?: number = 0;\r\n  /** dismiss current toast when max is reached */\r\n  autoDismiss?: boolean = false;\r\n  iconClasses?: ToastrIconClasses = {\r\n    error: 'toast-error',\r\n    info: 'toast-info',\r\n    success: 'toast-success',\r\n    warning: 'toast-warning',\r\n  };\r\n  /** new toast placement */\r\n  newestOnTop?: boolean = true;\r\n  /** block duplicate messages */\r\n  preventDuplicates?: boolean = false;\r\n\r\n  constructor(config: ToastrConfig = {}) {\r\n    super(config);\r\n    this.maxOpened = config.maxOpened || this.maxOpened;\r\n    this.autoDismiss = config.autoDismiss || this.autoDismiss;\r\n    if (config.iconClasses) {\r\n      this.iconClasses.error = this.iconClasses.error || config.iconClasses.error;\r\n      this.iconClasses.info = this.iconClasses.info || config.iconClasses.info;\r\n      this.iconClasses.success = this.iconClasses.success || config.iconClasses.success;\r\n      this.iconClasses.warning = this.iconClasses.warning || config.iconClasses.warning;\r\n    }\r\n    this.newestOnTop = config.newestOnTop || this.newestOnTop;\r\n    this.preventDuplicates = config.preventDuplicates || this.preventDuplicates;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ToastrConfig, },\n];\n}\r\n\r\nexport class ToastData {\r\n  toastId: number;\r\n  optionsOverride: ToastConfig;\r\n  message: string;\r\n  title: string;\r\n  toastType: string;\r\n  /** Fired on click */\r\n  onTap: Subject<any>;\r\n  /** available for use in custom toast */\r\n  onAction: Subject<any>;\r\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}