{"version":3,"sources":["../../../../src/app/typescripts/pro/alerts/toastInjector.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AAGrC,OAAO,EAAC,SAAS,EAAC,MAAM,gBAAgB,CAAC;AAKzC;IASE,kBAAoB,WAAuB;QAAvB,gBAAW,GAAX,WAAW,CAAY;QAJnC,iBAAY,GAAiB,IAAI,OAAO,EAAE,CAAC;QAC3C,cAAS,GAAiB,IAAI,OAAO,EAAE,CAAC;QACxC,iBAAY,GAAiB,IAAI,OAAO,EAAE,CAAC;IAEJ,CAAC;IAEhD,8BAAW,GAAX;QACE,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QACzB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAED,+BAAY,GAAZ;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IAC1C,CAAC;IAKD,wBAAK,GAAL;QACE,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QACzB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAGD,8BAAW,GAAX;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IAC1C,CAAC;IAED,6BAAU,GAAV;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;IAClC,CAAC;IAED,2BAAQ,GAAR;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;IAC5B,CAAC;IAGD,gCAAa,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IACvC,CAAC;IACH,eAAC;AAAD,CA/CA,AA+CC,IAAA;;AAID;IACE,uBACU,UAAyB,EACzB,KAAgB,EAChB,eAAyB;QAFzB,eAAU,GAAV,UAAU,CAAe;QACzB,UAAK,GAAL,KAAK,CAAW;QAChB,oBAAe,GAAf,eAAe,CAAU;IAAI,CAAC;IAExC,2BAAG,GAAH,UAAI,KAAU,EAAE,aAAmB;QACjC,EAAE,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;QAED,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;IACxD,CAAC;IACH,oBAAC;AAAD,CAjBA,AAiBC,IAAA","file":"toastInjector.js","sourceRoot":"","sourcesContent":["import {Injector} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\nimport {OverlayRef} from './overlay/overlay-ref';\r\nimport {ToastData} from './toastrConfig';\r\n\r\n/**\r\n * Reference to a toast opened via the Toastr service.\r\n */\r\nexport class ToastRef<T> {\r\n  /** The instance of component opened into the toast. */\r\n  componentInstance: T;\r\n\r\n  /** Subject for notifying the user that the toast has finished closing. */\r\n  private _afterClosed: Subject<any> = new Subject();\r\n  private _activate: Subject<any> = new Subject();\r\n  private _manualClose: Subject<any> = new Subject();\r\n\r\n  constructor(private _overlayRef: OverlayRef) { }\r\n\r\n  manualClose() {\r\n    this._manualClose.next();\r\n    this._manualClose.complete();\r\n  }\r\n\r\n  manualClosed(): Observable<any> {\r\n    return this._manualClose.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Close the toast.\r\n   */\r\n  close(): void {\r\n    this._overlayRef.detach();\r\n    this._afterClosed.next();\r\n    this._afterClosed.complete();\r\n  }\r\n\r\n  /** Gets an observable that is notified when the toast is finished closing. */\r\n  afterClosed(): Observable<any> {\r\n    return this._afterClosed.asObservable();\r\n  }\r\n\r\n  isInactive() {\r\n    return this._activate.isStopped;\r\n  }\r\n\r\n  activate() {\r\n    this._activate.next();\r\n    this._activate.complete();\r\n  }\r\n\r\n  /** Gets an observable that is notified when the toast has started opening. */\r\n  afterActivate(): Observable<any> {\r\n    return this._activate.asObservable();\r\n  }\r\n}\r\n\r\n\r\n/** Custom injector type specifically for instantiating components with a toast. */\r\nexport class ToastInjector implements Injector {\r\n  constructor(\r\n    private _dialogRef: ToastRef<any>,\r\n    private _data: ToastData,\r\n    private _parentInjector: Injector) { }\r\n\r\n  get(token: any, notFoundValue?: any): any {\r\n    if (token === ToastRef) {\r\n      return this._dialogRef;\r\n    }\r\n\r\n    if (token === ToastData && this._data) {\r\n      return this._data;\r\n    }\r\n\r\n    return this._parentInjector.get(token, notFoundValue);\r\n  }\r\n}"]}