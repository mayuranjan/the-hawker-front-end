{"version":3,"sources":["../../../../../src/app/typescripts/pro/alerts/portal/dom-portal-host.ts"],"names":[],"mappings":";;;;;;;;;;AAMA,OAAO,EAAE,cAAc,EAAmB,MAAM,UAAU,CAAC;AAS3D;IAAmC,iCAAc;IAC/C,uBACY,eAAwB,EACxB,yBAAmD,EACnD,OAAuB;QAHnC,YAIE,iBAAO,SACR;QAJW,qBAAe,GAAf,eAAe,CAAS;QACxB,+BAAyB,GAAzB,yBAAyB,CAA0B;QACnD,aAAO,GAAP,OAAO,CAAgB;;IAEnC,CAAC;IAMD,6CAAqB,GAArB,UAAyB,MAA0B,EAAE,WAAoB;QAAzE,iBA+BC;QA9BC,IAAM,gBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAClG,IAAI,YAA6B,CAAC;QAOlC,YAAY,GAAG,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAMxD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE/C,IAAI,CAAC,YAAY,CAAC;YAChB,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC/C,YAAY,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QAIH,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC/G,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;QAC7E,CAAC;QAED,MAAM,CAAC,YAAY,CAAC;IACtB,CAAC;IAGO,6CAAqB,GAA7B,UAA8B,YAA+B;QAC3D,MAAM,CAAE,YAAY,CAAC,QAAiC,CAAC,SAAS,CAAC,CAAC,CAAgB,CAAC;IACrF,CAAC;IACH,oBAAC;AAAD,CAjDA,AAiDC,CAjDkC,cAAc,GAiDhD","file":"dom-portal-host.js","sourceRoot":"","sourcesContent":["import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  ApplicationRef,\r\n} from '@angular/core';\r\nimport { BasePortalHost, ComponentPortal } from './portal';\r\n\r\n\r\n/**\r\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n *\r\n * This is the only part of the portal core that directly touches the DOM.\r\n */\r\nexport class DomPortalHost extends BasePortalHost {\r\n  constructor(\r\n      private _hostDomElement: Element,\r\n      private _componentFactoryResolver: ComponentFactoryResolver,\r\n      private _appRef: ApplicationRef) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\r\n   * @param portal Portal to be attached\r\n   */\r\n  attachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean): ComponentRef<T> {\r\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\r\n    let componentRef: ComponentRef<T>;\r\n\r\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\r\n    // for the component (in terms of Angular's component tree, not rendering).\r\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\r\n    // and then manually attach the ChangeDetector for that component to the application (which\r\n    // happens automatically when using a ViewContainer).\r\n    componentRef = componentFactory.create(portal.injector);\r\n\r\n    // When creating a component outside of a ViewContainer, we need to manually register\r\n    // its ChangeDetector with the application. This API is unfortunately not yet published\r\n    // in Angular core. The change detector must also be deregistered when the component\r\n    // is destroyed to prevent memory leaks.\r\n    this._appRef.attachView(componentRef.hostView);\r\n\r\n    this.setDisposeFn(() => {\r\n      this._appRef.detachView(componentRef.hostView);\r\n      componentRef.destroy();\r\n    });\r\n\r\n    // At this point the component has been instantiated, so we move it to the location in the DOM\r\n    // where we want it to be rendered.\r\n    if (newestOnTop) {\r\n      this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\r\n    } else {\r\n      this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\r\n    }\r\n\r\n    return componentRef;\r\n  }\r\n\r\n  /** Gets the root HTMLElement for an instantiated component. */\r\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\r\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n  }\r\n}"]}