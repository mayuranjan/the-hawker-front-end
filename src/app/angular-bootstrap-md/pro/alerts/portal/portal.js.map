{"version":3,"sources":["../../../../../src/app/typescripts/pro/alerts/portal/portal.ts"],"names":[],"mappings":"AAcA;IAeE,yBAAY,SAA2B,EAAE,QAAkB;QACzD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAGD,gCAAM,GAAN,UAAO,IAAoB,EAAE,WAAoB;QAC/C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACxC,CAAC;IAGD,gCAAM,GAAN;QACE,IAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACvB,CAAC;IAGD,sBAAI,uCAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC;QACpC,CAAC;;;OAAA;IAMD,yCAAe,GAAf,UAAgB,IAAoB;QAClC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC5B,CAAC;IACH,sBAAC;AAAD,CA7CA,AA6CC,IAAA;;AAMD;IAAA;IA2BA,CAAC;IApBC,+BAAM,GAAN,UAAO,MAA4B,EAAE,WAAoB;QACvD,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IACzD,CAAC;IAID,+BAAM,GAAN;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAAC,CAAC;QAEzE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC;IACH,CAAC;IAED,qCAAY,GAAZ,UAAa,EAAc;QACzB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,CAAC;IACH,qBAAC;AAAD,CA3BA,AA2BC,IAAA","file":"portal.js","sourceRoot":"","sourcesContent":["import {\r\n  ViewContainerRef,\r\n  ComponentRef,\r\n  Injector\r\n} from '@angular/core';\r\n\r\nexport interface ComponentType<T> {\r\n  new (...args: any[]): T;\r\n}\r\n\r\n\r\n/**\r\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\r\n */\r\nexport class ComponentPortal<T> {\r\n  private _attachedHost: BasePortalHost;\r\n  /** The type of the component that will be instantiated for attachment. */\r\n  component: ComponentType<T>;\r\n\r\n  /**\r\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\r\n   * This is different from where the component *renders*, which is determined by the PortalHost.\r\n   * The origin necessary when the host is outside of the Angular application context.\r\n   */\r\n  viewContainerRef: ViewContainerRef;\r\n\r\n  /** Injector used for the instantiation of the component. */\r\n  injector: Injector;\r\n\r\n  constructor(component: ComponentType<T>, injector: Injector) {\r\n    this.component = component;\r\n    this.injector = injector;\r\n  }\r\n\r\n  /** Attach this portal to a host. */\r\n  attach(host: BasePortalHost, newestOnTop: boolean) {\r\n    this._attachedHost = host;\r\n    return host.attach(this, newestOnTop);\r\n  }\r\n\r\n  /** Detach this portal from its host */\r\n  detach(): void {\r\n    const host = this._attachedHost;\r\n    this._attachedHost = null;\r\n    return host.detach();\r\n  }\r\n\r\n  /** Whether this portal is attached to a host. */\r\n  get isAttached(): boolean {\r\n    return this._attachedHost != null;\r\n  }\r\n\r\n  /**\r\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\r\n   * the PortalHost when it is performing an `attach()` or `detach()`.\r\n   */\r\n  setAttachedHost(host: BasePortalHost) {\r\n    this._attachedHost = host;\r\n  }\r\n}\r\n\r\n/**\r\n * Partial implementation of PortalHost that only deals with attaching a\r\n * ComponentPortal\r\n */\r\nexport abstract class BasePortalHost {\r\n  /** The portal currently attached to the host. */\r\n  private _attachedPortal: ComponentPortal<any>;\r\n\r\n  /** A function that will permanently dispose this host. */\r\n  private _disposeFn: () => void;\r\n\r\n  attach(portal: ComponentPortal<any>, newestOnTop: boolean) {\r\n    this._attachedPortal = portal;\r\n    return this.attachComponentPortal(portal, newestOnTop);\r\n  }\r\n\r\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean): ComponentRef<T>;\r\n\r\n  detach() {\r\n    if (this._attachedPortal) { this._attachedPortal.setAttachedHost(null); }\r\n\r\n    this._attachedPortal = null;\r\n    if (this._disposeFn != null) {\r\n      this._disposeFn();\r\n      this._disposeFn = null;\r\n    }\r\n  }\r\n\r\n  setDisposeFn(fn: () => void) {\r\n    this._disposeFn = fn;\r\n  }\r\n}"]}