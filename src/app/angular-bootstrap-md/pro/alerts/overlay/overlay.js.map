{"version":3,"sources":["../../../../../src/app/typescripts/pro/alerts/overlay/overlay.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAA,EAA0B,UAAA,EAAY,cAAA,EAAgB,MAAA,EAAO,MAAO,eAAA,CAAgB;AAC7F,OAAO,EAAE,aAAA,EAAc,MAAO,2BAAA,CAA4B;AAC1D,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAE3C,OAAO,EAAE,gBAAA,EAAiB,MAAO,qBAAA,CAAsB;AAarD;IAEE,iBAAoB,iBAAmC,EACnC,yBAAmD,EACnD,OAAuB,EACvB,OAAe;QAHf,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,8BAAyB,GAAzB,yBAAyB,CAA0B;QACnD,YAAO,GAAP,OAAO,CAAgB;QACvB,YAAO,GAAP,OAAO,CAAQ;QAJ3B,kBAAa,GAAQ,EAAE,CAAC;IAIM,CAAC;IAKzC,wBAAM,GAAN,UAAO,aAAqB,EAAE,gBAA0C;QAEtE,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC,CAAC;IACtF,CAAC;IAED,gCAAc,GAAd,UAAe,aAAqB,EAAE,gBAA0C;QAC9E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;QAC/F,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IAC3C,CAAC;IAMO,oCAAkB,GAA1B,UAA2B,aAAqB,EAAE,gBAA0C;QAC1F,IAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,EAAE,GAAG,iBAAiB,CAAC;QAC5B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAElC,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACjE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,gBAAgB,CAAC,mBAAmB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAOO,mCAAiB,GAAzB,UAA0B,IAAiB;QACzC,MAAM,CAAC,IAAI,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,yBAAyB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC/E,CAAC;IAMO,mCAAiB,GAAzB,UAA0B,IAAiB;QACzC,MAAM,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1E,CAAC;IAWH,cAAC;AAAD,CAjEE,AAiED;;AAVM,kBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AAEK,sBAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,gBAAgB,GAAG;IAC1B,EAAC,IAAI,EAAE,wBAAwB,GAAG;IAClC,EAAC,IAAI,EAAE,cAAc,GAAG;IACxB,EAAC,IAAI,EAAE,MAAM,GAAG;CACf,EAL6F,CAK7F,CAAC;AAKF,MAAM,CAVC,IAAM,iBAAA,GAAoB;IAW/B,OAAO;IACP,gBAAgB;CACjB,CAVC","file":"overlay.js","sourceRoot":"","sourcesContent":["import { ComponentFactoryResolver, Injectable, ApplicationRef, NgZone } from '@angular/core';\r\nimport { DomPortalHost } from '../portal/dom-portal-host';\r\nimport { OverlayRef } from './overlay-ref';\r\n\r\nimport { OverlayContainer } from './overlay-container';\r\nimport { ToastContainerDirective } from '../toastDirective';\r\n\r\n\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\r\n */\r\n \r\n  export class Overlay {\r\n    private _paneElements: any = {};\r\n    constructor(private _overlayContainer: OverlayContainer,\r\n                private _componentFactoryResolver: ComponentFactoryResolver,\r\n                private _appRef: ApplicationRef,\r\n                private _ngZone: NgZone) {}\r\n  /**\r\n   * Creates an overlay.\r\n   * @returns A reference to the created overlay.\r\n   */\r\n  create(positionClass: string, overlayContainer?: ToastContainerDirective): OverlayRef {\r\n    // get existing pane if possible\r\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\r\n  }\r\n\r\n  getPaneElement(positionClass: string, overlayContainer?: ToastContainerDirective): HTMLElement {\r\n    if (!this._paneElements[positionClass]) {\r\n      this._paneElements[positionClass] = this._createPaneElement(positionClass, overlayContainer);\r\n    }\r\n    return this._paneElements[positionClass];\r\n  }\r\n\r\n  /**\r\n   * Creates the DOM element for an overlay and appends it to the overlay container.\r\n   * @returns Newly-created pane element\r\n   */\r\n  private _createPaneElement(positionClass: string, overlayContainer?: ToastContainerDirective): HTMLElement {\r\n    const pane = document.createElement('div');\r\n    pane.id = 'toast-container';\r\n    pane.classList.add(positionClass);\r\n\r\n    if (!overlayContainer) {\r\n      this._overlayContainer.getContainerElement().appendChild(pane);\r\n    } else {\r\n      overlayContainer.getContainerElement().appendChild(pane);\r\n    }\r\n    return pane;\r\n  }\r\n\r\n  /**\r\n   * Create a DomPortalHost into which the overlay content can be loaded.\r\n   * @param pane The DOM element to turn into a portal host.\r\n   * @returns A portal host for the given DOM element.\r\n   */\r\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\r\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\r\n  }\r\n\r\n  /**\r\n   * Creates an OverlayRef for an overlay in the given DOM element.\r\n   * @param pane DOM element for the overlay\r\n   */\r\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\r\n    return new OverlayRef(this._createPortalHost(pane), pane, this._ngZone);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n{type: NgZone, },\n];\n}\r\n\r\n\r\n/** Providers for Overlay and its related injectables. */\r\nexport const OVERLAY_PROVIDERS = [\r\n  Overlay,\r\n  OverlayContainer,\r\n];\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}