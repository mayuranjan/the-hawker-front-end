{"version":3,"sources":["../../../../src/app/typescripts/pro/tags/chipsComponent.ts"],"names":[],"mappings":"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","file":"chipsComponent.js","sourceRoot":"","sourcesContent":["import { Component,\r\n         NgModule,\r\n         OnInit, \r\n         Input,\r\n         Output,\r\n         EventEmitter, \r\n         ElementRef,\r\n         forwardRef} from '@angular/core'\r\nimport {NgClass} from '@angular/common';\r\n\r\n\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\n\r\n\r\nconst noop = () => {\r\n};\r\n\r\nexport const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR : any= {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => MaterialChipsComponent),\r\n    multi: true\r\n};\r\n\r\n\r\n\r\nexport class MaterialChipsComponent implements ControlValueAccessor { \r\n\r\n   public placeholder = '';\r\n\r\n  addAreaDisplayed:boolean;           \r\n  isTagsFocused = false;\r\n  values:string[];\r\n  labelToAdd:string;\r\n  focused:string;\r\n  selected: string;\r\n\r\n   tagsfocusedChange = new EventEmitter();\r\n   labelsChange: EventEmitter<string[]> = new EventEmitter<string[]>();\r\n\r\n  \r\n  get tagsfocused() {\r\n    return this.isTagsFocused;\r\n  }\r\n\r\n  private onTouchedCallback: () => void = noop;\r\n  private onChangeCallback: (_: any) => void = noop;\r\n  registerOnChange(fn: any) { this.onChangeCallback = fn;}\r\n  registerOnTouched(fn: any) { this.onTouchedCallback = fn;}\r\n\r\n\r\n\r\n  removeValue(value:string) {\r\n    var index = this.values.indexOf(value, 0);\r\n    if (index != undefined) {\r\n      this.values.splice(index, 1);\r\n      this.labelsChange.emit(this.values);\r\n    }\r\n  }\r\n\r\n  addValue(value:string) {\r\n    if(!value || value.trim()===''){return;}\r\n    this.values.push(value);\r\n    this.labelsChange.emit(this.values);\r\n    this.labelToAdd = '';\r\n  }\r\n  \r\n  //From ControlValueAccessor interface\r\n  writeValue(value:string[]) {\r\n      if (value !== this.values) {\r\n          this.values = value;\r\n      }\r\n  }\r\n\r\n  onFocus() {\r\n   this.focused = 'md-focused';\r\n   this.isTagsFocused = true;\r\n   // console.log('tags focused', this.isTagsFocused)\r\n   this.tagsfocusedChange.emit(this.isTagsFocused)\r\n  }\r\n  focusOutFunction() {\r\n    this.focused = '';\r\n    this.isTagsFocused = false;\r\n    // console.log('tags focused', this.isTagsFocused)\r\n    this.tagsfocusedChange.emit(this.isTagsFocused)\r\n  } \r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'material-chips',\r\n  template: `\r\n\r\n    <div *ngIf=\"values && values.length\" class=\"md-chip-list\"  [ngClass]=\"focused\">\r\n        <span *ngFor=\"let value of values\" class=\"md-chip\" selected >         \r\n        {{value}} <i class=\"close fa fa-times\" aria-hidden=\"true\" (click)=\"removeValue(value)\" ></i>\r\n        </span>\r\n    \r\n        <span>\r\n        <input [(ngModel)]=\"labelToAdd\" \r\n        (keyup.enter)=\"addValue(box.value, $event);$event.preventDefault()\"\r\n        (focus)=\"onFocus()\" \r\n        (focusout)=\"focusOutFunction()\"  \r\n        #box />\r\n        </span>\r\n    </div>\r\n    <div *ngIf=\"!values || !values.length\">\r\n        <input class=\"md-chips-input\" placeholder=\"{{ placeholder }}\" #tbox (keyup.enter)=\"addValue(tbox.value, $event);$event.preventDefault()\"/>\r\n    </div>\r\n  `,\r\n  providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'placeholder': [{ type: Input, args: ['placeholder', ] },],\n'tagsfocusedChange': [{ type: Output },],\n'labelsChange': [{ type: Output },],\n'tagsfocused': [{ type: Input },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}