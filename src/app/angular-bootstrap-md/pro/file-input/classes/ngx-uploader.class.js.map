{"version":3,"sources":["../../../../../src/app/typescripts/pro/file-input/classes/ngx-uploader.class.ts"],"names":[],"mappings":"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","file":"ngx-uploader.class.js","sourceRoot":"","sourcesContent":["import { EventEmitter } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { Subscriber } from 'rxjs/Subscriber';\r\nimport 'rxjs/add/observable/merge';\r\nimport 'rxjs/add/observable/from';\r\nimport 'rxjs/add/operator/mergeAll';\r\nimport 'rxjs/add/operator/combineLatest';\r\n\r\nexport enum UploadStatus {\r\n  Queue,\r\n  Uploading,\r\n  Done,\r\n  Canceled\r\n}\r\n\r\nexport interface UploadProgress {\r\n  status: UploadStatus;\r\n  data?: {\r\n    percentage: number;\r\n    speed: number;\r\n    speedHuman: string;\r\n  };\r\n}\r\n\r\nexport interface UploadFile {\r\n  id: string;\r\n  fileIndex: number;\r\n  lastModifiedDate: Date;\r\n  name: string;\r\n  size: number;\r\n  type: string;\r\n  progress: UploadProgress;\r\n  response?: any;\r\n}\r\n\r\nexport interface UploadOutput {\r\n  type: 'addedToQueue' | 'allAddedToQueue' | 'uploading' | 'done' | 'removed' | 'start' | 'cancelled' | 'dragOver' | 'dragOut' | 'drop';\r\n  file?: UploadFile;\r\n}\r\n\r\nexport interface UploadInput {\r\n  type: 'uploadAll' | 'uploadFile' | 'cancel' | 'cancelAll';\r\n  url?: string;\r\n  method?: string;\r\n  id?: string;\r\n  fileIndex?: number;\r\n  file?: UploadFile;\r\n  data?: { [key: string]: string | Blob };\r\n  headers?: { [key: string]: string };\r\n  concurrency?: number;\r\n}\r\n\r\nexport function humanizeBytes(bytes: number): string {\r\n  if (bytes === 0) {\r\n    return '0 Byte';\r\n  }\r\n\r\n  const k = 1024;\r\n  const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n  const i: number = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n}\r\n\r\nexport class NgUploaderService {\r\n  fileList: FileList;\r\n  files: UploadFile[];\r\n  uploads: { file?: UploadFile, files?: UploadFile[], sub: Subscription }[];\r\n  serviceEvents: EventEmitter<UploadOutput>;\r\n\r\n  constructor() {\r\n    this.files = [];\r\n    this.serviceEvents = new EventEmitter<any>();\r\n    this.uploads = [];\r\n  }\r\n\r\n  handleFiles(files: FileList): void {\r\n    this.fileList = files;\r\n\r\n    this.files = [].map.call(files, (file: File, i: number) => {\r\n      const uploadFile: UploadFile = {\r\n        fileIndex: i,\r\n        id: this.generateId(),\r\n        name: file.name,\r\n        size: file.size,\r\n        type: file.type,\r\n        progress: {\r\n          status: UploadStatus.Queue,\r\n          data: {\r\n            percentage: 0,\r\n            speed: null,\r\n            speedHuman: null\r\n          }\r\n        },\r\n        lastModifiedDate: file.lastModifiedDate\r\n      };\r\n\r\n      this.serviceEvents.emit({ type: 'addedToQueue', file: uploadFile });\r\n      return uploadFile;\r\n    });\r\n\r\n    this.serviceEvents.emit({ type: 'allAddedToQueue' });\r\n  }\r\n\r\n  initInputEvents(input: EventEmitter<UploadInput>): void {\r\n    input.subscribe((event: UploadInput) => {\r\n      switch (event.type) {\r\n        case 'uploadFile':\r\n          this.serviceEvents.emit({ type: 'start', file: event.file });\r\n          const sub = this.uploadFile(event.file, event).subscribe(data => {\r\n            this.serviceEvents.emit(data);\r\n          });\r\n\r\n          this.uploads.push({ file: event.file, sub: sub });\r\n        break;\r\n        case 'uploadAll':\r\n          let concurrency = event.concurrency > 0 ? event.concurrency : Number.POSITIVE_INFINITY;\r\n\r\n          const subscriber = Subscriber.create((data: UploadOutput) => {\r\n            this.serviceEvents.emit(data);\r\n          });\r\n\r\n          this.uploads = this.uploads.concat(this.files.map(file => {\r\n            return { file: file, sub: null };\r\n          }));\r\n\r\n          const subscription = Observable.from(this.files.map(file => this.uploadFile(file, event)))\r\n            .mergeAll(concurrency)\r\n            .combineLatest(data => data)\r\n            .subscribe(subscriber);\r\n        break;\r\n        case 'cancel':\r\n          const id = event.id || null;\r\n          if (!id) {\r\n            return;\r\n          }\r\n\r\n          const index = this.uploads.findIndex(upload => upload.file.id === id);\r\n          if (index !== -1) {\r\n            if (this.uploads[index].sub) {\r\n              this.uploads[index].sub.unsubscribe();\r\n            }\r\n\r\n            this.serviceEvents.emit({ type: 'cancelled', file: this.uploads[index].file });\r\n            this.uploads[index].file.progress.status = UploadStatus.Canceled;\r\n          }\r\n        break;\r\n        case 'cancelAll':\r\n          this.uploads.forEach(upload => {\r\n            upload.file.progress.status = UploadStatus.Canceled;\r\n            this.serviceEvents.emit({ type: 'cancelled', file: upload.file });\r\n          });\r\n        break;\r\n      }\r\n    });\r\n  }\r\n\r\n  uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {\r\n    return new Observable(observer => {\r\n      const url = event.url;\r\n      const method = event.method || 'POST';\r\n      const data = event.data || {};\r\n      const headers = event.headers || {};\r\n\r\n      const reader = new FileReader();\r\n      const xhr = new XMLHttpRequest();\r\n      let time: number = new Date().getTime();\r\n      let load = 0;\r\n\r\n      xhr.upload.addEventListener('progress', (e: ProgressEvent) => {\r\n        if (e.lengthComputable) {\r\n          const percentage = Math.round((e.loaded * 100) / e.total);\r\n          const diff = new Date().getTime() - time;\r\n          time += diff;\r\n          load = e.loaded - load;\r\n          const speed = parseInt((load / diff * 1000) as any, 10);\r\n\r\n          file.progress = {\r\n            status: UploadStatus.Uploading,\r\n            data: {\r\n              percentage: percentage,\r\n              speed: speed,\r\n              speedHuman: `${humanizeBytes(speed)}/s`\r\n            }\r\n          };\r\n\r\n          observer.next({ type: 'uploading', file: file });\r\n        }\r\n      }, false);\r\n\r\n      xhr.upload.addEventListener('error', (e: Event) => {\r\n        observer.error(e);\r\n        observer.complete();\r\n      });\r\n\r\n      xhr.onreadystatechange = () => {\r\n        if (xhr.readyState === XMLHttpRequest.DONE) {\r\n          file.progress = {\r\n            status: UploadStatus.Done,\r\n            data: {\r\n              percentage: 100,\r\n              speed: null,\r\n              speedHuman: null\r\n            }\r\n          };\r\n\r\n          try {\r\n            file.response = JSON.parse(xhr.response);\r\n          } catch (e) {\r\n            file.response = xhr.response;\r\n          }\r\n\r\n          observer.next({ type: 'done', file: file });\r\n          observer.complete();\r\n        }\r\n      };\r\n\r\n      xhr.open(method, url, true);\r\n\r\n      const form = new FormData();\r\n      try {\r\n        const uploadFile = this.fileList.item(file.fileIndex);\r\n        const uploadIndex = this.uploads.findIndex(upload => upload.file.size === uploadFile.size);\r\n        if (this.uploads[uploadIndex].file.progress.status === UploadStatus.Canceled) {\r\n          observer.complete();\r\n        }\r\n\r\n        form.append('file', uploadFile, uploadFile.name);\r\n\r\n        Object.keys(data).forEach(key => form.append(key, data[key]));\r\n        Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\r\n\r\n        this.serviceEvents.emit({ type: 'start', file: file });\r\n        xhr.send(form);\r\n      } catch (e) {\r\n        observer.complete();\r\n      }\r\n\r\n      return () => {\r\n        xhr.abort();\r\n        reader.abort();\r\n      };\r\n    });\r\n  }\r\n\r\n  generateId(): string {\r\n    return Math.random().toString(36).substring(7);\r\n  }\r\n}"]}