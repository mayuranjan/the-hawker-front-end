{"version":3,"sources":["../../../../../src/app/typescripts/pro/file-input/directives/ng-file-select.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,UAAA,EAAY,YAAA,EAAc,KAAA,EAAO,MAAA,EAA2B,WAAA,EAAa,MAAA,EAAO,MAAO,eAAA,CAAgB;AAC3H,OAAO,EAAE,gBAAA,EAAiB,MAAO,iBAAA,CAAkB;AACnD,OAAO,EAAE,iBAAA,EAAyD,MAAO,+BAAA,CAAgC;AAGzG;IAQE,+BAAqB,WAAgB,EAAU,UAAsB;QAArE,iBAGC;QAHoB,gBAAW,GAAX,WAAW,CAAK;QAAU,eAAU,GAAV,UAAU,CAAY;QAHrE,aAAQ,GAAY,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAkCvD,iBAAY,GAAG;YACb,KAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC,CAAA;QAhCC,IAAI,CAAC,MAAM,GAAG,IAAI,iBAAiB,EAAE,CAAC;QACtC,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,EAAgB,CAAC;IACvD,CAAC;IAED,wCAAQ,GAAR;QAAA,iBAeC;QAdC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QACxC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAE7D,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,UAAC,KAAmB;YACtD,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,YAAY,YAAY,CAAC,CAAC,CAAC;YAC7C,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAED,2CAAW,GAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAChE,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;IACjC,CAAC;IAmBH,4BAAC;AAAD,CAxDA,AAwDC;;AAdM,gCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,gBAAgB;aAC3B,EAAG,EAAE;CACL,CAAC;AAEK,oCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAG,EAAC;IAC1E,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,EAH6F,CAG7F,CAAC;AACK,oCAAc,GAA2C;IAChE,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACjC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CAClC,CAAC","file":"ng-file-select.directive.js","sourceRoot":"","sourcesContent":["import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\nimport { NgUploaderService, UploadOutput, UploadInput, UploadFile } from '../classes/ngx-uploader.class';\r\n\r\n\r\nexport class NgFileSelectDirective implements OnInit, OnDestroy {\r\n   uploadInput: EventEmitter<any>;\r\n   uploadOutput: EventEmitter<UploadOutput>;\r\n\r\n  upload: NgUploaderService;\r\n  isServer: boolean = isPlatformServer(this.platform_id);\r\n  el: HTMLInputElement;\r\n\r\n  constructor( private platform_id: any, private elementRef: ElementRef) {\r\n    this.upload = new NgUploaderService();\r\n    this.uploadOutput = new EventEmitter<UploadOutput>();\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.isServer) {\r\n      return;\r\n    }\r\n\r\n    this.el = this.elementRef.nativeElement;\r\n    this.el.addEventListener('change', this.fileListener, false);\r\n\r\n    this.upload.serviceEvents.subscribe((event: UploadOutput) => {\r\n      this.uploadOutput.emit(event);\r\n    });\r\n\r\n    if (this.uploadInput instanceof EventEmitter) {\r\n      this.upload.initInputEvents(this.uploadInput);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.isServer) {\r\n      return;\r\n    }\r\n\r\n    this.el.removeEventListener('change', this.fileListener, false);\r\n    this.uploadInput.unsubscribe();\r\n  }\r\n\r\n  fileListener = () => {\r\n    this.upload.handleFiles(this.el.files);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[ngFileSelect]'\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'uploadInput': [{ type: Input },],\n'uploadOutput': [{ type: Output },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}