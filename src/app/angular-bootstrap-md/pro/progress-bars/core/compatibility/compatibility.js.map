{"version":3,"sources":["../../../../../../src/app/typescripts/pro/progress-bars/core/compatibility/compatibility.ts"],"names":[],"mappings":"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","file":"compatibility.js","sourceRoot":"","sourcesContent":["import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  Directive,\r\n  OpaqueToken,\r\n  Inject,\r\n  Optional,\r\n  isDevMode,\r\n  ElementRef,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {MdError} from '../errors/errors';\r\n\r\n/** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\r\nlet hasDoneGlobalChecks = false;\r\n\r\nexport const MATERIAL_COMPATIBILITY_MODE = new OpaqueToken('md-compatibility-mode');\r\n\r\n/**\r\n * Exception thrown if the consumer has used an invalid Material prefix on a component.\r\n * @docs-private\r\n */\r\nexport class MdCompatibilityInvalidPrefixError extends MdError {\r\n  constructor(prefix: string, nodeName: string) {\r\n    super(\r\n      `The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\r\n      `It was used on an \"${nodeName.toLowerCase()}\" element.`\r\n    );\r\n  }\r\n}\r\n\r\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\r\nexport const MAT_ELEMENTS_SELECTOR = `\r\n  [mat-button],\r\n  [mat-dialog-actions],\r\n  [mat-dialog-close],\r\n  [mat-dialog-content],\r\n  [mat-dialog-title],\r\n  [mat-fab],\r\n  [mat-icon-button],\r\n  [mat-menu-trigger-for],\r\n  [mat-mini-fab],\r\n  [mat-raised-button],\r\n  [mat-tab-label],\r\n  [mat-tab-link],\r\n  [mat-tab-nav-bar],\r\n  [matTooltip],\r\n  mat-autocomplete,\r\n  mat-button-toggle,\r\n  mat-button-toggle-group,\r\n  mat-button-toggle,\r\n  mat-card,\r\n  mat-card-actions,\r\n  mat-card-content,\r\n  mat-card-footer,\r\n  mat-card-header,\r\n  mat-card-subtitle,\r\n  mat-card-title,\r\n  mat-card-title-group,\r\n  mat-checkbox,\r\n  mat-chip,\r\n  mat-dialog-actions,\r\n  mat-dialog-container,\r\n  mat-dialog-content,\r\n  mat-divider,\r\n  mat-grid-list,\r\n  mat-grid-tile,\r\n  mat-grid-tile-footer,\r\n  mat-grid-tile-header,\r\n  mat-hint,\r\n  mat-icon,\r\n  mat-list,\r\n  mat-list-item,\r\n  mat-menu,\r\n  mat-nav-list,\r\n  mat-option,\r\n  mat-placeholder,\r\n  mat-progress-bar,\r\n  mat-pseudo-checkbox,\r\n  mat-radio-button,\r\n  mat-radio-group,\r\n  mat-select,\r\n  mat-sidenav,\r\n  mat-sidenav-container,\r\n  mat-slider,\r\n  mat-spinner,\r\n  mat-tab,\r\n  mat-tab-group,\r\n  mat-toolbar,\r\n  mat-error`;\r\n\r\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\r\nexport const MD_ELEMENTS_SELECTOR = `\r\n  [md-button],\r\n  [md-dialog-actions],\r\n  [md-dialog-close],\r\n  [md-dialog-content],\r\n  [md-dialog-title],\r\n  [md-fab],\r\n  [md-icon-button],\r\n  [md-menu-trigger-for],\r\n  [md-mini-fab],\r\n  [md-raised-button],\r\n  [md-tab-label],\r\n  [md-tab-link],\r\n  [md-tab-nav-bar],\r\n  [mdTooltip],\r\n  md-autocomplete,\r\n  md-button-toggle,\r\n  md-button-toggle-group,\r\n  md-button-toggle,\r\n  md-card,\r\n  md-card-actions,\r\n  md-card-content,\r\n  md-card-footer,\r\n  md-card-header,\r\n  md-card-subtitle,\r\n  md-card-title,\r\n  md-card-title-group,\r\n  md-checkbox,\r\n  md-chip,\r\n  md-dialog-actions,\r\n  md-dialog-container,\r\n  md-dialog-content,\r\n  md-divider,\r\n  md-grid-list,\r\n  md-grid-tile,\r\n  md-grid-tile-footer,\r\n  md-grid-tile-header,\r\n  md-hint,\r\n  md-icon,\r\n  md-list,\r\n  md-list-item,\r\n  md-menu,\r\n  md-nav-list,\r\n  md-option,\r\n  md-placeholder,\r\n  md-progress-bar,\r\n  md-pseudo-checkbox,\r\n  md-radio-button,\r\n  md-radio-group,\r\n  md-select,\r\n  md-sidenav,\r\n  md-sidenav-container,\r\n  md-slider,\r\n  md-spinner,\r\n  md-tab,\r\n  md-tab-group,\r\n  md-toolbar,\r\n  md-error`;\r\n\r\n/** Directive that enforces that the `mat-` prefix cannot be used. */\r\n\r\nexport class MatPrefixRejector {\r\n  constructor(\r\n      isCompatibilityMode: boolean,\r\n    elementRef: ElementRef) {\r\n\r\n    if (!isCompatibilityMode) {\r\n      throw new MdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\r\n\r\n/** Directive that enforces that the `md-` prefix cannot be used. */\r\n\r\nexport class MdPrefixRejector {\r\n  constructor(\r\n      isCompatibilityMode: boolean,\r\n    elementRef: ElementRef) {\r\n\r\n    if (isCompatibilityMode) {\r\n      throw new MdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\r\n\r\n\r\n/**\r\n * Module that enforces the default compatibility mode settings. When this module is loaded\r\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\r\n * there are any uses of the `mat-` prefix.\r\n */\r\n\r\nexport class CompatibilityModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: CompatibilityModule,\r\n      providers: [],\r\n    };\r\n  }\r\n\r\n  constructor(  private _document: any) {\r\n    if (!hasDoneGlobalChecks && isDevMode()) {\r\n      this._checkDoctype();\r\n      this._checkTheme();\r\n      hasDoneGlobalChecks = true;\r\n    }\r\n  }\r\n\r\n  private _checkDoctype(): void {\r\n    if (this._document && !this._document.doctype) {\r\n      console.warn(\r\n        'Current document does not have a doctype. This may cause ' +\r\n        'some Angular Material components not to behave as expected.'\r\n      );\r\n    }\r\n  }\r\n\r\n  private _checkTheme(): void {\r\n    if (this._document && typeof getComputedStyle === 'function') {\r\n      const testElement = this._document.createElement('div');\r\n\r\n      testElement.classList.add('mat-theme-loaded-marker');\r\n      this._document.body.appendChild(testElement);\r\n\r\n      if (getComputedStyle(testElement).display !== 'none') {\r\n        console.warn(\r\n          'Could not find Angular Material core theme. Most Material ' +\r\n          'components may not work as expected. For more info refer ' +\r\n          'to the theming guide: https://material.angular.io/guide/theming'\r\n        );\r\n      }\r\n\r\n      this._document.body.removeChild(testElement);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [MatPrefixRejector, MdPrefixRejector],\r\n  exports: [MatPrefixRejector, MdPrefixRejector],\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\r\n\r\n\r\n/**\r\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\r\n * it will throw an error if there are any uses of the `md-` prefix.\r\n */\r\n\r\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [{\r\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\r\n  }],\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}