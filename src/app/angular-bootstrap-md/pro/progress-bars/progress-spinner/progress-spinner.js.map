{"version":3,"sources":["../../../../../src/app/typescripts/pro/progress-bars/progress-spinner/progress-spinner.ts"],"names":[],"mappings":"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","file":"progress-spinner.js","sourceRoot":"","sourcesContent":["import {\r\n  Component,\r\n  HostBinding,\r\n  ChangeDetectionStrategy,\r\n  OnDestroy,\r\n  Input,\r\n  ElementRef,\r\n  NgZone,\r\n  Renderer, Directive\r\n} from '@angular/core';\r\n\r\n\r\n// TODO(josephperrott): Benchpress tests.\r\n\r\n/** A single degree in radians. */\r\nconst DEGREE_IN_RADIANS = Math.PI / 180;\r\n/** Duration of the indeterminate animation. */\r\nconst DURATION_INDETERMINATE = 667;\r\n/** Duration of the indeterminate animation. */\r\nconst DURATION_DETERMINATE = 225;\r\n/** Start animation value of the indeterminate animation */\r\nconst startIndeterminate = 3;\r\n/** End animation value of the indeterminate animation */\r\nconst endIndeterminate = 80;\r\n/* Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden. */\r\nconst MAX_ANGLE = 359.99 / 100;\r\n\r\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\r\n\r\ntype EasingFn = (currentTime: number, startValue: number,\r\n                 changeInValue: number, duration: number) => number;\r\n\r\n\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * @docs-private\r\n */\r\n\r\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-progress-spinner, mat-progress-spinner',\r\n  host: {\r\n    '[class.mat-progress-spinner]': 'true'\r\n  }\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\r\n\r\n/**\r\n * <md-progress-spinner> component.\r\n */\r\n\r\nexport class MdProgressSpinner implements OnDestroy {\r\n  /** The id of the last requested animation. */\r\n  private _lastAnimationId: number = 0;\r\n\r\n  /** The id of the indeterminate interval. */\r\n  private _interdeterminateInterval: any;\r\n\r\n  /** The SVG <path> node that is used to draw the circle. */\r\n  private _path: SVGPathElement;\r\n\r\n  private _mode: ProgressSpinnerMode = 'determinate';\r\n  private _value: number;\r\n  private _color: string = 'primary';\r\n\r\n  /**\r\n   * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\r\n   * because voiceover does not report the progress indicator as indeterminate if the aria min\r\n   * and/or max value are number values.\r\n   */\r\n  get _ariaValueMin() {\r\n    return this.mode == 'determinate' ? 0 : null;\r\n  }\r\n\r\n  get _ariaValueMax() {\r\n    return this.mode == 'determinate' ? 100 : null;\r\n  }\r\n\r\n  /** @docs-private */\r\n  get interdeterminateInterval() {\r\n    return this._interdeterminateInterval;\r\n  }\r\n  /** @docs-private */\r\n  set interdeterminateInterval(interval) {\r\n    clearInterval(this._interdeterminateInterval);\r\n    this._interdeterminateInterval = interval;\r\n  }\r\n\r\n  /**\r\n   * Clean up any animations that were running.\r\n   */\r\n  ngOnDestroy() {\r\n    this._cleanupIndeterminateAnimation();\r\n  }\r\n\r\n  /** The color of the progress-spinner. Can be primary, accent, or warn. */\r\n  \r\n  get color(): string { return this._color; }\r\n  set color(value: string) {\r\n    this._updateColor(value);\r\n  }\r\n\r\n  /** Value of the progress circle. It is bound to the host as the attribute aria-valuenow. */\r\n  \r\n  \r\n  get value() {\r\n    if (this.mode == 'determinate') {\r\n      return this._value;\r\n    }\r\n  }\r\n  set value(v: number) {\r\n    if (v != null && this.mode == 'determinate') {\r\n      let newValue = clamp(v);\r\n      this._animateCircle(this.value || 0, newValue);\r\n      this._value = newValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mode of the progress circle\r\n   *\r\n   * Input must be one of the values from ProgressMode, defaults to 'determinate'.\r\n   * mode is bound to the host as the attribute host.\r\n   */\r\n  \r\n  \r\n  get mode() {\r\n    return this._mode;\r\n  }\r\n  set mode(mode: ProgressSpinnerMode) {\r\n    if (mode !== this._mode) {\r\n      if (mode === 'indeterminate') {\r\n        this._startIndeterminateAnimation();\r\n      } else {\r\n        this._cleanupIndeterminateAnimation();\r\n        this._animateCircle(0, this._value);\r\n      }\r\n      this._mode = mode;\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    private _elementRef: ElementRef,\r\n    private _renderer: Renderer\r\n  ) {}\r\n\r\n\r\n  /**\r\n   * Animates the circle from one percentage value to another.\r\n   *\r\n   * @param animateFrom The percentage of the circle filled starting the animation.\r\n   * @param animateTo The percentage of the circle filled ending the animation.\r\n   * @param ease The easing function to manage the pace of change in the animation.\r\n   * @param duration The length of time to show the animation, in milliseconds.\r\n   * @param rotation The starting angle of the circle fill, with 0° represented at the top center\r\n   *    of the circle.\r\n   */\r\n  private _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\r\n                        duration = DURATION_DETERMINATE, rotation = 0) {\r\n\r\n    let id = ++this._lastAnimationId;\r\n    let startTime = Date.now();\r\n    let changeInValue = animateTo - animateFrom;\r\n\r\n    // No need to animate it if the values are the same\r\n    if (animateTo === animateFrom) {\r\n      this._renderArc(animateTo, rotation);\r\n    } else {\r\n      let animation = () => {\r\n        let elapsedTime = Math.max(0, Math.min(Date.now() - startTime, duration));\r\n\r\n        this._renderArc(\r\n          ease(elapsedTime, animateFrom, changeInValue, duration),\r\n          rotation\r\n        );\r\n\r\n        // Prevent overlapping animations by checking if a new animation has been called for and\r\n        // if the animation has lasted longer than the animation duration.\r\n        if (id === this._lastAnimationId && elapsedTime < duration) {\r\n          requestAnimationFrame(animation);\r\n        }\r\n      };\r\n\r\n      // Run the animation outside of Angular's zone, in order to avoid\r\n      // hitting ZoneJS and change detection on each frame.\r\n      this._ngZone.runOutsideAngular(animation);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Starts the indeterminate animation interval, if it is not already running.\r\n   */\r\n  private _startIndeterminateAnimation() {\r\n    let rotationStartPoint = 0;\r\n    let start = startIndeterminate;\r\n    let end = endIndeterminate;\r\n    let duration = DURATION_INDETERMINATE;\r\n    let animate = () => {\r\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\r\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\r\n      rotationStartPoint = (rotationStartPoint + end) % 100;\r\n      let temp = start;\r\n      start = -end;\r\n      end = -temp;\r\n    };\r\n\r\n    if (!this.interdeterminateInterval) {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\r\n        animate();\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Removes interval, ending the animation.\r\n   */\r\n  private _cleanupIndeterminateAnimation() {\r\n    this.interdeterminateInterval = null;\r\n  }\r\n\r\n  /**\r\n   * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\r\n   * DOM attribute on the `<path>`.\r\n   */\r\n  private _renderArc(currentValue: number, rotation = 0) {\r\n    // Caches the path reference so it doesn't have to be looked up every time.\r\n    let path = this._path = this._path || this._elementRef.nativeElement.querySelector('path');\r\n\r\n    // Ensure that the path was found. This may not be the case if the\r\n    // animation function fires too early.\r\n    if (path) {\r\n      path.setAttribute('d', getSvgArc(currentValue, rotation));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the color of the progress-spinner by adding the new palette class to the element\r\n   * and removing the old one.\r\n   */\r\n  private _updateColor(newColor: string) {\r\n    this._setElementColor(this._color, false);\r\n    this._setElementColor(newColor, true);\r\n    this._color = newColor;\r\n  }\r\n\r\n  /** Sets the given palette class on the component element. */\r\n  private _setElementColor(color: string, isAdd: boolean) {\r\n    if (color != null && color != '') {\r\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'md-progress-spinner, mat-progress-spinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    '[attr.aria-valuemin]': '_ariaValueMin',\r\n    '[attr.aria-valuemax]': '_ariaValueMax'\r\n  },\r\n  template: `<!--\r\n    preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\r\n    center. The center of the circle will remain at the center of the md-progress-spinner\r\n    element containing the SVG.\r\n    -->\r\n    <svg viewBox=\"0 0 100 100\"\r\n        preserveAspectRatio=\"xMidYMid meet\">\r\n      <path></path>\r\n    </svg>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'mode': [{ type: HostBinding, args: ['attr.mode', ] },{ type: Input },],\n};\n}\r\n\r\n\r\n/**\r\n * <md-spinner> component.\r\n *\r\n * This is a component definition to be used as a convenience reference to create an\r\n * indeterminate <md-progress-spinner> instance.\r\n */\r\n\r\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\r\n\r\n  constructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer) {\r\n    super(ngZone, elementRef, renderer);\r\n    this.mode = 'indeterminate';\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\r\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\r\n    super.ngOnDestroy();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'md-spinner, mat-spinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'mode': 'indeterminate',\r\n    '[class.mat-spinner]': 'true',\r\n  },\r\n  template: `<!--\r\n    preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\r\n    center. The center of the circle will remain at the center of the md-progress-spinner\r\n    element containing the SVG.\r\n    -->\r\n    <svg viewBox=\"0 0 100 100\"\r\n        preserveAspectRatio=\"xMidYMid meet\">\r\n      <path></path>\r\n    </svg>\r\n  `,\r\n   styles: [`\r\n     :host {\r\n      display: block;\r\n      height: 100px;\r\n      width: 100px;\r\n      overflow: hidden;\r\n    }\r\n\r\n    :host svg {\r\n      height: 100%;\r\n      width: 100%;\r\n      transform-origin: center\r\n    }\r\n\r\n    :host path {\r\n      fill: transparent;\r\n      stroke-width: 10px;\r\n      transition: stroke .3s cubic-bezier(.35, 0, .25, 1)\r\n    }\r\n\r\n    :host[mode=indeterminate] svg {\r\n      animation-duration: 5.25s, 2.887s;\r\n      animation-name: mat-progress-spinner-sporadic-rotate, mat-progress-spinner-linear-rotate;\r\n      animation-timing-function: cubic-bezier(.35, 0, .25, 1), linear;\r\n      animation-iteration-count: infinite;\r\n      transition: none\r\n    }\r\n\r\n    @keyframes mat-progress-spinner-linear-rotate {\r\n      0% {\r\n        transform: rotate(0)\r\n      }\r\n      100% {\r\n        transform: rotate(360deg)\r\n      }\r\n    }\r\n\r\n    @keyframes mat-progress-spinner-sporadic-rotate {\r\n      12.5% {\r\n        transform: rotate(135deg)\r\n      }\r\n      25% {\r\n        transform: rotate(270deg)\r\n      }\r\n      37.5% {\r\n        transform: rotate(405deg)\r\n      }\r\n      50% {\r\n        transform: rotate(540deg)\r\n      }\r\n      62.5% {\r\n        transform: rotate(675deg)\r\n      }\r\n      75% {\r\n        transform: rotate(810deg)\r\n      }\r\n      87.5% {\r\n        transform: rotate(945deg)\r\n      }\r\n      100% {\r\n        transform: rotate(1080deg)\r\n      }\r\n    }\r\n  `],\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer, },\n];\n}\r\n\r\n\r\n/**\r\n * Module functions.\r\n */\r\n\r\n/** Clamps a value to be between 0 and 100. */\r\nfunction clamp(v: number) {\r\n  return Math.max(0, Math.min(100, v));\r\n}\r\n\r\n\r\n/**\r\n * Converts Polar coordinates to Cartesian.\r\n */\r\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\r\n  let angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\r\n\r\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\r\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\r\n}\r\n\r\n\r\n/**\r\n * Easing function for linear animation.\r\n */\r\nfunction linearEase(currentTime: number, startValue: number,\r\n                    changeInValue: number, duration: number) {\r\n  return changeInValue * currentTime / duration + startValue;\r\n}\r\n\r\n\r\n/**\r\n * Easing function to match material design indeterminate animation.\r\n */\r\nfunction materialEase(currentTime: number, startValue: number,\r\n                      changeInValue: number, duration: number) {\r\n  let time = currentTime / duration;\r\n  let timeCubed = Math.pow(time, 3);\r\n  let timeQuad = Math.pow(time, 4);\r\n  let timeQuint = Math.pow(time, 5);\r\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\r\n}\r\n\r\n\r\n/**\r\n * Determines the path value to define the arc.  Converting percentage values to to polar\r\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\r\n *\r\n * @param currentValue The current percentage value of the progress circle, the percentage of the\r\n *    circle to fill.\r\n * @param rotation The starting point of the circle with 0 being the 0 degree point.\r\n * @return A string for an SVG path representing a circle filled from the starting point to the\r\n *    percentage value provided.\r\n */\r\nfunction getSvgArc(currentValue: number, rotation: number) {\r\n  let startPoint = rotation || 0;\r\n  let radius = 50;\r\n  let pathRadius = 40;\r\n\r\n  let startAngle = startPoint * MAX_ANGLE;\r\n  let endAngle = currentValue * MAX_ANGLE;\r\n  let start = polarToCartesian(radius, pathRadius, startAngle);\r\n  let end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\r\n  let arcSweep = endAngle < 0 ? 0 : 1;\r\n  let largeArcFlag: number;\r\n\r\n  if (endAngle < 0) {\r\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\r\n  } else {\r\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\r\n  }\r\n\r\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\r\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}