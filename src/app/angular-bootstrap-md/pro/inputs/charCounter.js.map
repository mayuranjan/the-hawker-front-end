{"version":3,"sources":["../../../../src/app/typescripts/pro/inputs/charCounter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAU,SAAA,EAAW,UAAA,EAAY,QAAA,EAAU,KAAA,EAAO,YAAA,EAAa,MAAO,eAAA,CAAgB;AAK7F;IAMI,qBAAoB,MAAkB,EAAU,SAAmB;QAA/C,WAAM,GAAN,MAAM,CAAY;QAAU,cAAS,GAAT,SAAS,CAAU;QAH3D,YAAO,GAAW,EAAE,CAAC;IAGyC,CAAC;IAEvE,8BAAQ,GAAR;QAEI,IAAI,CAAC,aAAa,GAAI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;QACjG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAClE,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;QACnD,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IAC1E,CAAC;IAGA,6BAAO,GAAP;QACE,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;QAE3F,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;QAC/E,CAAC;QAAC,IAAI,CAAC,CAAC;YACH,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;QACjF,CAAC;IACJ,CAAC;IAEA,0BAAI,GAAJ;QACG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IAC1E,CAAC;IAEA,0BAAI,GAAJ;QACG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3E,CAAC;IAkBL,kBAAC;AAAD,CAnDA,AAmDC;;AAhBM,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,eAAe;aAC5B,EAAG,EAAE;CACL,CAAC;AAEK,0BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,EAH6F,CAG7F,CAAC;AACK,0BAAc,GAA2C;IAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAG,EAAE,EAAE;IACnE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAG,EAAE,EAAE;IAC/D,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAG,EAAE,EAAE;CAC/D,CAAC","file":"charCounter.js","sourceRoot":"","sourcesContent":["import { OnInit, Directive, ElementRef, Renderer, Input, HostListener } from '@angular/core';\r\n\r\n\r\n\r\n\r\nexport class charCounter implements OnInit {\r\n    \r\n\r\n     public maxChar: number = 20;\r\n    public textContainer: any;\r\n\r\n    constructor(private _elRef: ElementRef, private _renderer: Renderer) {}\r\n\r\n    ngOnInit() {\r\n        // Inititalise a new <span> element for the count display and render it below the host component.\r\n        this.textContainer =  this._renderer.createElement(this._elRef.nativeElement.parentElement, 'p');\r\n        this._renderer.setElementClass(this.textContainer, \"chars\", true);\r\n        this.textContainer.innerHTML = \"0/\" + this.maxChar;\r\n        this._renderer.setElementStyle(this.textContainer, \"display\", \"none\");\r\n    }\r\n\r\n\r\n     onKeyUp() {\r\n       this.textContainer.innerHTML = this._elRef.nativeElement.value.length + \"/\" + this.maxChar;\r\n\r\n       if(this._elRef.nativeElement.value.length > this.maxChar) {\r\n           this._renderer.setElementClass(this._elRef.nativeElement, \"invalid\", true);\r\n       } else {\r\n            this._renderer.setElementClass(this._elRef.nativeElement, \"invalid\", false);\r\n       }\r\n    }\r\n\r\n     hide() {\r\n        this._renderer.setElementStyle(this.textContainer, \"display\", \"none\");\r\n    }\r\n\r\n     show() {\r\n        this._renderer.setElementStyle(this.textContainer, \"display\", \"block\");\r\n    }\r\n    \r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[charCounter]'\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'maxChar': [{ type: Input },],\n'onKeyUp': [{ type: HostListener, args: ['keyup', ['$event'], ] },],\n'hide': [{ type: HostListener, args: ['blur', ['$event'], ] },],\n'show': [{ type: HostListener, args: ['focus', ['$event'], ] },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}