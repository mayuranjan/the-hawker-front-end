{"version":3,"sources":["../../../../../../../src/app/typescripts/free/angular2-google-maps/ts/core/directives/google-map-circle.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,YAAA,EAAyD,MAAM,eAAA,CAAgB;AAMlG,OAAO,EAAA,aAAE,EAAa,MAAM,qCAAA,CAAsC;AAGlE;IAmJE,6BAAoB,QAAuB;QAAvB,aAAQ,GAAR,QAAQ,CAAe;QAxI3C;;WAEG;QACH,cAAS,GAAY,IAAI,CAAC;QAE1B;;WAEG;QACH,cAAS,GAAY,KAAK,CAAC;QAE3B;;;WAGG;QACH,aAAQ,GAAY,KAAK,CAAC;QAY1B;;WAEG;QACH,WAAM,GAAW,CAAC,CAAC;QAYnB;;;WAGG;QACH,mBAAc,GAAgC,QAAQ,CAAC;QAEvD;;WAEG;QACH,iBAAY,GAAW,CAAC,CAAC;QAEzB;;WAEG;QACH,YAAO,GAAY,IAAI,CAAC;QAOxB;;WAEG;QACH,iBAAY,GAAgC,IAAI,YAAY,EAAiB,CAAC;QAE9E;;WAEG;QACH,gBAAW,GAA6B,IAAI,YAAY,EAAc,CAAC;QAEvE;;WAEG;QACH,mBAAc,GAA6B,IAAI,YAAY,EAAc,CAAC;QAE1E;;WAEG;QACH,SAAI,GAA6B,IAAI,YAAY,EAAc,CAAC;QAEhE;;WAEG;QACH,YAAO,GAA6B,IAAI,YAAY,EAAc,CAAC;QAEnE;;WAEG;QACH,cAAS,GAA6B,IAAI,YAAY,EAAc,CAAC;QAErE;;WAEG;QACH,cAAS,GAA6B,IAAI,YAAY,EAAc,CAAC;QAErE;;WAEG;QACH,cAAS,GAA6B,IAAI,YAAY,EAAc,CAAC;QAErE;;WAEG;QACH,aAAQ,GAA6B,IAAI,YAAY,EAAc,CAAC;QAEpE;;WAEG;QACH,cAAS,GAA6B,IAAI,YAAY,EAAc,CAAC;QAErE;;WAEG;QACH,YAAO,GAA6B,IAAI,YAAY,EAAc,CAAC;QAEnE;;WAEG;QACH,iBAAY,GAAyB,IAAI,YAAY,EAAU,CAAC;QAEhE;;WAEG;QACH,eAAU,GAA6B,IAAI,YAAY,EAAc,CAAC;QAE9D,0BAAqB,GAAY,KAAK,CAAC;QAOvC,wBAAmB,GAAmB,EAAE,CAAC;IAEH,CAAC;IAE/C,sCAAQ,GAAR;QACE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAED,yCAAW,GAAX,UAAY,OAAsC;QAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC;QACT,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QACD,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAEO,yDAA2B,GAAnC,UAAoC,OAA2C;QAC7E,IAAI,OAAO,GAA8B,EAAE,CAAC;QAC5C,IAAI,UAAU,GACV,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,mBAAmB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAjD,CAAiD,CAAC,CAAC;QACxF,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC,IAAO,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC;IACH,CAAC;IAEO,qDAAuB,GAA/B;QAAA,iBAkCC;QAjCC,IAAI,MAAM,GAAmC,IAAI,GAAG,EAA6B,CAAC;QAClF,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAChD,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACtC,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACxC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACxC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACxC,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACxC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAChD,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAE1C,MAAM,CAAC,OAAO,CAAC,UAAC,YAAY,EAAE,SAAS;YACrC,KAAI,CAAC,mBAAmB,CAAC,IAAI,CACzB,KAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAgB,SAAS,EAAE,KAAI,CAAC,CAAC,SAAS,CAAC,UAAC,KAAK;gBAClF,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBAClB,KAAK,gBAAgB;wBACnB,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAI,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,EAAzB,CAAyB,CAAC,CAAC;wBAC1E,KAAK,CAAC;oBACR,KAAK,gBAAgB;wBACnB,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAI,CAAC,CAAC,IAAI,CAC9B,UAAC,MAAM;4BACH,OAAA,YAAY,CAAC,IAAI,CAAgB,EAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,EAAC,CAAC;wBAAxE,CAAwE,CAAC,CAAC;wBAClF,KAAK,CAAC;oBACR;wBACE,YAAY,CAAC,IAAI,CACD,EAAC,MAAM,EAAE,EAAC,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,EAAC,EAAC,CAAC,CAAC;gBAClF,CAAC;YACH,CAAC,CAAC,CAAC,CAAC;QACV,CAAC,CAAC,CAAC;IACL,CAAC;IAED,yCAAW,GAAX;QACE,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAS,CAAe,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACjF,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,uCAAS,GAAT,cAAqC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAE5E,uCAAS,GAAT,cAA+B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAmBxE,0BAAC;AAAD,CA7PA,AA6PC;;AAjHgB,+BAAW,GAAa;IACrC,WAAW,EAAE,aAAa,EAAE,aAAa,EAAE,eAAe,EAAE,gBAAgB,EAAE,cAAc;IAC5F,SAAS,EAAE,QAAQ;CACpB,CAAC;AA4FG,8BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,wBAAwB;gBAClC,MAAM,EAAE;oBACN,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,4BAA4B,EAAE,UAAU,EAAE,WAAW;oBAC3F,aAAa,EAAE,QAAQ,EAAE,aAAa,EAAE,eAAe,EAAE,gBAAgB,EAAE,cAAc;oBACzF,SAAS,EAAE,QAAQ;iBACpB;gBACD,OAAO,EAAE;oBACP,cAAc,EAAE,aAAa,EAAE,gBAAgB,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW;oBAC5F,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,cAAc,EAAE,YAAY;iBAC9E;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,kCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,aAAa,GAAG;CACtB,EAF6F,CAE7F,CAAC","file":"google-map-circle.js","sourceRoot":"","sourcesContent":["import {Directive, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange} from '@angular/core';\r\nimport {Subscription} from 'rxjs/Subscription';\r\n\r\nimport {MouseEvent} from '../map-types';\r\nimport {LatLng, LatLngBounds, LatLngLiteral} from '../services/google-maps-types';\r\nimport {MouseEvent as MapMouseEvent} from '../services/google-maps-types';\r\nimport {CircleManager} from '../services/managers/circle-manager';\r\n\r\n\r\nexport class SebmGoogleMapCircle implements OnInit, OnChanges, OnDestroy {\r\n  /**\r\n   * The latitude position of the circle (required).\r\n   */\r\n  latitude: number;\r\n\r\n  /**\r\n   * The clickable position of the circle (required).\r\n   */\r\n  longitude: number;\r\n\r\n  /**\r\n   * Indicates whether this Circle handles mouse events. Defaults to true.\r\n   */\r\n  clickable: boolean = true;\r\n\r\n  /**\r\n   * If set to true, the user can drag this circle over the map. Defaults to false.\r\n   */\r\n  draggable: boolean = false;\r\n\r\n  /**\r\n   * If set to true, the user can edit this circle by dragging the control points shown at\r\n   * the center and around the circumference of the circle. Defaults to false.\r\n   */\r\n  editable: boolean = false;\r\n\r\n  /**\r\n   * The fill color. All CSS3 colors are supported except for extended named colors.\r\n   */\r\n  fillColor: string;\r\n\r\n  /**\r\n   * The fill opacity between 0.0 and 1.0.\r\n   */\r\n  fillOpacity: number;\r\n\r\n  /**\r\n   * The radius in meters on the Earth's surface.\r\n   */\r\n  radius: number = 0;\r\n\r\n  /**\r\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\r\n   */\r\n  strokeColor: string;\r\n\r\n  /**\r\n   * The stroke opacity between 0.0 and 1.0\r\n   */\r\n  strokeOpacity: number;\r\n\r\n  /**\r\n   * The stroke position. Defaults to CENTER.\r\n   * This property is not supported on Internet Explorer 8 and earlier.\r\n   */\r\n  strokePosition: 'CENTER'|'INSIDE'|'OUTSIDE' = 'CENTER';\r\n\r\n  /**\r\n   * The stroke width in pixels.\r\n   */\r\n  strokeWeight: number = 0;\r\n\r\n  /**\r\n   * Whether this circle is visible on the map. Defaults to true.\r\n   */\r\n  visible: boolean = true;\r\n\r\n  /**\r\n   * The zIndex compared to other polys.\r\n   */\r\n  zIndex: number;\r\n\r\n  /**\r\n   * This event is fired when the circle's center is changed.\r\n   */\r\n  centerChange: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\r\n\r\n  /**\r\n   * This event emitter gets emitted when the user clicks on the circle.\r\n   */\r\n  circleClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event emitter gets emitted when the user clicks on the circle.\r\n   */\r\n  circleDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event is repeatedly fired while the user drags the circle.\r\n   */\r\n  drag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event is fired when the user stops dragging the circle.\r\n   */\r\n  dragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event is fired when the user starts dragging the circle.\r\n   */\r\n  dragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event is fired when the DOM mousedown event is fired on the circle.\r\n   */\r\n  mouseDown: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event is fired when the DOM mousemove event is fired on the circle.\r\n   */\r\n  mouseMove: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event is fired on circle mouseout.\r\n   */\r\n  mouseOut: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event is fired on circle mouseover.\r\n   */\r\n  mouseOver: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event is fired when the DOM mouseup event is fired on the circle.\r\n   */\r\n  mouseUp: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event is fired when the circle's radius is changed.\r\n   */\r\n  radiusChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /**\r\n   * This event is fired when the circle is right-clicked on.\r\n   */\r\n  rightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  private _circleAddedToManager: boolean = false;\r\n\r\n  private static _mapOptions: string[] = [\r\n    'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\r\n    'visible', 'zIndex'\r\n  ];\r\n\r\n  private _eventSubscriptions: Subscription[] = [];\r\n\r\n  constructor(private _manager: CircleManager) {}\r\n\r\n  ngOnInit() {\r\n    this._manager.addCircle(this);\r\n    this._circleAddedToManager = true;\r\n    this._registerEventListeners();\r\n  }\r\n\r\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\r\n    if (!this._circleAddedToManager) {\r\n      return;\r\n    }\r\n    if (changes['latitude'] || changes['longitude']) {\r\n      this._manager.setCenter(this);\r\n    }\r\n    if (changes['editable']) {\r\n      this._manager.setEditable(this);\r\n    }\r\n    if (changes['draggable']) {\r\n      this._manager.setDraggable(this);\r\n    }\r\n    if (changes['visible']) {\r\n      this._manager.setVisible(this);\r\n    }\r\n    if (changes['radius']) {\r\n      this._manager.setRadius(this);\r\n    }\r\n    this._updateCircleOptionsChanges(changes);\r\n  }\r\n\r\n  private _updateCircleOptionsChanges(changes: {[propName: string]: SimpleChange}) {\r\n    let options: {[propName: string]: any} = {};\r\n    let optionKeys =\r\n        Object.keys(changes).filter(k => SebmGoogleMapCircle._mapOptions.indexOf(k) !== -1);\r\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\r\n    if (optionKeys.length > 0) {\r\n      this._manager.setOptions(this, options);\r\n    }\r\n  }\r\n\r\n  private _registerEventListeners() {\r\n    let events: Map<string, EventEmitter<any>> = new Map<string, EventEmitter<any>>();\r\n    events.set('center_changed', this.centerChange);\r\n    events.set('click', this.circleClick);\r\n    events.set('dblclick', this.circleDblClick);\r\n    events.set('drag', this.drag);\r\n    events.set('dragend', this.dragEnd);\r\n    events.set('dragStart', this.dragStart);\r\n    events.set('mousedown', this.mouseDown);\r\n    events.set('mousemove', this.mouseMove);\r\n    events.set('mouseout', this.mouseOut);\r\n    events.set('mouseover', this.mouseOver);\r\n    events.set('mouseup', this.mouseUp);\r\n    events.set('radius_changed', this.radiusChange);\r\n    events.set('rightclick', this.rightClick);\r\n\r\n    events.forEach((eventEmitter, eventName) => {\r\n      this._eventSubscriptions.push(\r\n          this._manager.createEventObservable<MapMouseEvent>(eventName, this).subscribe((value) => {\r\n            switch (eventName) {\r\n              case 'radius_changed':\r\n                this._manager.getRadius(this).then((radius) => eventEmitter.emit(radius));\r\n                break;\r\n              case 'center_changed':\r\n                this._manager.getCenter(this).then(\r\n                    (center) =>\r\n                        eventEmitter.emit(<LatLngLiteral>{lat: center.lat(), lng: center.lng()}));\r\n                break;\r\n              default:\r\n                eventEmitter.emit(\r\n                    <MouseEvent>{coords: {lat: value.latLng.lat(), lng: value.latLng.lng()}});\r\n            }\r\n          }));\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._eventSubscriptions.forEach(function(s: Subscription) { s.unsubscribe(); });\r\n    this._eventSubscriptions = null;\r\n    this._manager.removeCircle(this);\r\n  }\r\n\r\n  /**\r\n   * Gets the LatLngBounds of this Circle.\r\n   */\r\n  getBounds(): Promise<LatLngBounds> { return this._manager.getBounds(this); }\r\n\r\n  getCenter(): Promise<LatLng> { return this._manager.getCenter(this); }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'sebm-google-map-circle',\r\n  inputs: [\r\n    'latitude', 'longitude', 'clickable', 'draggable: circleDraggable', 'editable', 'fillColor',\r\n    'fillOpacity', 'radius', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\r\n    'visible', 'zIndex'\r\n  ],\r\n  outputs: [\r\n    'centerChange', 'circleClick', 'circleDblClick', 'drag', 'dragEnd', 'dragStart', 'mouseDown',\r\n    'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'radiusChange', 'rightClick'\r\n  ]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CircleManager, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}