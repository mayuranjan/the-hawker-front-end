{"version":3,"sources":["../../../../../../../src/app/typescripts/free/angular2-google-maps/ts/core/directives/google-map-info-window.ts"],"names":[],"mappings":"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","file":"google-map-info-window.js","sourceRoot":"","sourcesContent":["import {Component, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange} from '@angular/core';\r\n\r\nimport {InfoWindowManager} from '../services/managers/info-window-manager';\r\n\r\nimport {SebmGoogleMapMarker} from './google-map-marker';\r\n\r\nlet infoWindowId = 0;\r\n\r\n/**\r\n * SebmGoogleMapInfoWindow renders a info window inside a {@link SebmGoogleMapMarker} or standalone.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from 'angular2/core';\r\n * import { SebmGoogleMap, SebmGoogleMapMarker, SebmGoogleMapInfoWindow } from\r\n * 'angular2-google-maps/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  directives: [SebmGoogleMap, SebmGoogleMapMarker, SebmGoogleMapInfoWindow],\r\n *  styles: [`\r\n *    .sebm-google-map-container {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <sebm-google-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *      <sebm-google-map-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\r\n *        <sebm-google-map-info-window [disableAutoPan]=\"true\">\r\n *          Hi, this is the content of the <strong>info window</strong>\r\n *        </sebm-google-map-info-window>\r\n *      </sebm-google-map-marker>\r\n *    </sebm-google-map>\r\n *  `\r\n * })\r\n * ```\r\n */\r\n\r\nexport class SebmGoogleMapInfoWindow implements OnDestroy, OnChanges, OnInit {\r\n  /**\r\n   * The latitude position of the info window (only usefull if you use it ouside of a {@link\r\n   * SebmGoogleMapMarker}).\r\n   */\r\n  latitude: number;\r\n\r\n  /**\r\n   * The longitude position of the info window (only usefull if you use it ouside of a {@link\r\n   * SebmGoogleMapMarker}).\r\n   */\r\n  longitude: number;\r\n\r\n  /**\r\n   * Disable auto-pan on open. By default, the info window will pan the map so that it is fully\r\n   * visible when it opens.\r\n   */\r\n  disableAutoPan: boolean;\r\n\r\n  /**\r\n   * All InfoWindows are displayed on the map in order of their zIndex, with higher values\r\n   * displaying in front of InfoWindows with lower values. By default, InfoWindows are displayed\r\n   * according to their latitude, with InfoWindows of lower latitudes appearing in front of\r\n   * InfoWindows at higher latitudes. InfoWindows are always displayed in front of markers.\r\n   */\r\n  zIndex: number;\r\n\r\n  /**\r\n   * Maximum width of the infowindow, regardless of content's width. This value is only considered\r\n   * if it is set before a call to open. To change the maximum width when changing content, call\r\n   * close, update maxWidth, and then open.\r\n   */\r\n  maxWidth: number;\r\n\r\n  /**\r\n   * Holds the marker that is the host of the info window (if available)\r\n   */\r\n  hostMarker: SebmGoogleMapMarker;\r\n\r\n  /**\r\n   * Holds the native element that is used for the info window content.\r\n   */\r\n  content: Node;\r\n\r\n  /**\r\n   * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\r\n   */\r\n  isOpen: boolean = false;\r\n\r\n  /**\r\n   * Emits an event when the info window is closed.\r\n   */\r\n  infoWindowClose: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  private static _infoWindowOptionsInputs: string[] = ['disableAutoPan', 'maxWidth'];\r\n  private _infoWindowAddedToManager: boolean = false;\r\n  private _id: string = (infoWindowId++).toString();\r\n\r\n  constructor(private _infoWindowManager: InfoWindowManager, private _el: ElementRef) {}\r\n\r\n  ngOnInit() {\r\n    this.content = this._el.nativeElement.querySelector('.sebm-google-map-info-window-content');\r\n    this._infoWindowManager.addInfoWindow(this);\r\n    this._infoWindowAddedToManager = true;\r\n    this._updateOpenState();\r\n    this._registerEventListeners();\r\n  }\r\n\r\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\r\n    if (!this._infoWindowAddedToManager) {\r\n      return;\r\n    }\r\n    if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\r\n        typeof this.longitude === 'number') {\r\n      this._infoWindowManager.setPosition(this);\r\n    }\r\n    if (changes['zIndex']) {\r\n      this._infoWindowManager.setZIndex(this);\r\n    }\r\n    if (changes['isOpen']) {\r\n      this._updateOpenState();\r\n    }\r\n    this._setInfoWindowOptions(changes);\r\n  }\r\n\r\n  private _registerEventListeners() {\r\n    this._infoWindowManager.createEventObservable('closeclick', this).subscribe(() => {\r\n      this.isOpen = false;\r\n      this.infoWindowClose.emit();\r\n    });\r\n  }\r\n\r\n  private _updateOpenState() {\r\n    this.isOpen ? this.open() : this.close();\r\n  }\r\n\r\n  private _setInfoWindowOptions(changes: {[key: string]: SimpleChange}) {\r\n    let options: {[propName: string]: any} = {};\r\n    let optionKeys = Object.keys(changes).filter(\r\n        k => SebmGoogleMapInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1);\r\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\r\n    this._infoWindowManager.setOptions(this, options);\r\n  }\r\n\r\n  /**\r\n   * Opens the info window.\r\n   */\r\n  open(): Promise<void> { return this._infoWindowManager.open(this); }\r\n\r\n  /**\r\n   * Closes the info window.\r\n   */\r\n  close(): Promise<void> {\r\n    return this._infoWindowManager.close(this).then(() => { this.infoWindowClose.emit(); });\r\n  }\r\n\r\n  id(): string { return this._id; }\r\n\r\n  toString(): string { return 'SebmGoogleMapInfoWindow-' + this._id.toString(); }\r\n\r\n  ngOnDestroy() { this._infoWindowManager.deleteInfoWindow(this); }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'sebm-google-map-info-window',\r\n  inputs: ['latitude', 'longitude', 'disableAutoPan', 'isOpen', 'zIndex', 'maxWidth'],\r\n  outputs: ['infoWindowClose'],\r\n  template: `<div class='sebm-google-map-info-window-content'>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InfoWindowManager, },\n{type: ElementRef, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}