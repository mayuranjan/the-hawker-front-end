{"version":3,"sources":["../../../../../../../src/app/typescripts/free/angular2-google-maps/ts/core/directives/google-map-kml-layer.ts"],"names":[],"mappings":"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","file":"google-map-kml-layer.js","sourceRoot":"","sourcesContent":["import {Directive, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\r\nimport {Subscription} from 'rxjs/Subscription';\r\n\r\nimport {KmlMouseEvent} from './../services/google-maps-types';\r\nimport {KmlLayerManager} from './../services/managers/kml-layer-manager';\r\n\r\nlet layerId = 0;\r\n\r\n\r\nexport class SebmGoogleMapKmlLayer implements OnInit, OnDestroy, OnChanges {\r\n  private _addedToManager: boolean = false;\r\n  private _id: string = (layerId++).toString();\r\n  private _subscriptions: Subscription[] = [];\r\n  private static _kmlLayerOptions: string[] =\r\n      ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\r\n\r\n  /**\r\n   * If true, the layer receives mouse events. Default value is true.\r\n   */\r\n  clickable: boolean = true;\r\n\r\n  /**\r\n   * By default, the input map is centered and zoomed to the bounding box of the contents of the\r\n   * layer.\r\n   * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\r\n   * were never set.\r\n   */\r\n  preserveViewport: boolean = false;\r\n\r\n  /**\r\n   * Whether to render the screen overlays. Default true.\r\n   */\r\n  screenOverlays: boolean = true;\r\n\r\n  /**\r\n   * Suppress the rendering of info windows when layer features are clicked.\r\n   */\r\n  suppressInfoWindows: boolean = false;\r\n\r\n  /**\r\n   * The URL of the KML document to display.\r\n   */\r\n  url: string = null;\r\n\r\n  /**\r\n   * The z-index of the layer.\r\n   */\r\n  zIndex: number|null = null;\r\n\r\n  /**\r\n   * This event is fired when a feature in the layer is clicked.\r\n   */\r\n  layerClick: EventEmitter<KmlMouseEvent> = new EventEmitter<KmlMouseEvent>();\r\n\r\n  /**\r\n   * This event is fired when the KML layers default viewport has changed.\r\n   */\r\n  defaultViewportChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * This event is fired when the KML layer has finished loading.\r\n   * At this point it is safe to read the status property to determine if the layer loaded\r\n   * successfully.\r\n   */\r\n  statusChange: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  constructor(private _manager: KmlLayerManager) {}\r\n\r\n  ngOnInit() {\r\n    if (this._addedToManager) {\r\n      return;\r\n    }\r\n    this._manager.addKmlLayer(this);\r\n    this._addedToManager = true;\r\n    this._addEventListeners();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (!this._addedToManager) {\r\n      return;\r\n    }\r\n    this._updatePolygonOptions(changes);\r\n  }\r\n\r\n  private _updatePolygonOptions(changes: SimpleChanges) {\r\n    const options = Object.keys(changes)\r\n                        .filter(k => SebmGoogleMapKmlLayer._kmlLayerOptions.indexOf(k) !== -1)\r\n                        .reduce((obj: any, k: string) => {\r\n                          obj[k] = changes[k].currentValue;\r\n                          return obj;\r\n                        }, {});\r\n    if (Object.keys(options).length > 0) {\r\n      this._manager.setOptions(this, options);\r\n    }\r\n  }\r\n\r\n  private _addEventListeners() {\r\n    const listeners = [\r\n      {name: 'click', handler: (ev: KmlMouseEvent) => this.layerClick.emit(ev)},\r\n      {name: 'defaultviewport_changed', handler: () => this.defaultViewportChange.emit()},\r\n      {name: 'status_changed', handler: () => this.statusChange.emit()},\r\n    ];\r\n    listeners.forEach((obj) => {\r\n      const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\r\n      this._subscriptions.push(os);\r\n    });\r\n  }\r\n\r\n  id(): string { return this._id; }\r\n\r\n  toString(): string { return `SebmGoogleMapKmlLayer-${this._id.toString()}`; }\r\n\r\n  ngOnDestroy() {\r\n    this._manager.deleteKmlLayer(this);\r\n    // unsubscribe all registered observable subscriptions\r\n    this._subscriptions.forEach(s => s.unsubscribe());\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'sebm-google-map-kml-layer',\r\n  inputs:\r\n      ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'],\r\n  outputs: ['layerClick', 'defaultViewportChange', 'statusChange']\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: KmlLayerManager, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}