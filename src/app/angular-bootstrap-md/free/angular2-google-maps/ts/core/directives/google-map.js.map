{"version":3,"sources":["../../../../../../../src/app/typescripts/free/angular2-google-maps/ts/core/directives/google-map.ts"],"names":[],"mappings":"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","file":"google-map.js","sourceRoot":"","sourcesContent":["import {Component, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange} from '@angular/core';\r\nimport {Subscription} from 'rxjs/Subscription';\r\n\r\nimport {MouseEvent} from '../map-types';\r\nimport {GoogleMapsAPIWrapper} from '../services/google-maps-api-wrapper';\r\nimport {LatLng, LatLngLiteral} from '../services/google-maps-types';\r\nimport {LatLngBounds, LatLngBoundsLiteral, MapTypeStyle} from '../services/google-maps-types';\r\nimport {CircleManager} from '../services/managers/circle-manager';\r\nimport {InfoWindowManager} from '../services/managers/info-window-manager';\r\nimport {MarkerManager} from '../services/managers/marker-manager';\r\nimport {PolygonManager} from '../services/managers/polygon-manager';\r\nimport {PolylineManager} from '../services/managers/polyline-manager';\r\n\r\nimport {KmlLayerManager} from './../services/managers/kml-layer-manager';\r\n\r\n/**\r\n * SebMGoogleMap renders a Google Map.\r\n * **Important note**: To be able see a map in the browser, you have to define a height for the CSS\r\n * class `sebm-google-map-container`.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from '@angular/core';\r\n * import { SebmGoogleMap } from 'angular2-google-maps/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  directives: [SebmGoogleMap],\r\n *  styles: [`\r\n *    .sebm-google-map-container {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <sebm-google-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *    </sebm-google-map>\r\n *  `\r\n * })\r\n * ```\r\n */\r\n\r\nexport class SebmGoogleMap implements OnChanges, OnInit, OnDestroy {\r\n  /**\r\n   * The longitude that defines the center of the map.\r\n   */\r\n  longitude: number = 0;\r\n\r\n  /**\r\n   * The latitude that defines the center of the map.\r\n   */\r\n  latitude: number = 0;\r\n\r\n  /**\r\n   * The zoom level of the map. The default zoom level is 8.\r\n   */\r\n  zoom: number = 8;\r\n\r\n  /**\r\n   * The minimal zoom level of the map allowed. When not provided, no restrictions to the zoom level\r\n   * are enforced.\r\n   */\r\n  minZoom: number;\r\n\r\n  /**\r\n   * The maximal zoom level of the map allowed. When not provided, no restrictions to the zoom level\r\n   * are enforced.\r\n   */\r\n  maxZoom: number;\r\n\r\n  /**\r\n   * Enables/disables if map is draggable.\r\n   */\r\n  draggable: boolean = true;\r\n\r\n  /**\r\n   * Enables/disables zoom and center on double click. Enabled by default.\r\n   */\r\n  disableDoubleClickZoom: boolean = false;\r\n\r\n  /**\r\n   * Enables/disables all default UI of the Google map. Please note: When the map is created, this\r\n   * value cannot get updated.\r\n   */\r\n  disableDefaultUI: boolean = false;\r\n\r\n  /**\r\n   * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\r\n   */\r\n  scrollwheel: boolean = true;\r\n\r\n  /**\r\n   * Color used for the background of the Map div. This color will be visible when tiles have not\r\n   * yet loaded as the user pans. This option can only be set when the map is initialized.\r\n   */\r\n  backgroundColor: string;\r\n\r\n  /**\r\n   * The name or url of the cursor to display when mousing over a draggable map. This property uses\r\n   * the css  * cursor attribute to change the icon. As with the css property, you must specify at\r\n   * least one fallback cursor that is not a URL. For example:\r\n   * [draggableCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\r\n   */\r\n  draggableCursor: string;\r\n\r\n  /**\r\n   * The name or url of the cursor to display when the map is being dragged. This property uses the\r\n   * css cursor attribute to change the icon. As with the css property, you must specify at least\r\n   * one fallback cursor that is not a URL. For example:\r\n   * [draggingCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\r\n   */\r\n  draggingCursor: string;\r\n\r\n  /**\r\n   * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\r\n   * enabled by default.\r\n   */\r\n  keyboardShortcuts: boolean = true;\r\n\r\n  /**\r\n   * The enabled/disabled state of the Zoom control.\r\n   */\r\n  zoomControl: boolean = true;\r\n\r\n  /**\r\n   * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\r\n   * modes, these styles will only apply to labels and geometry.\r\n   */\r\n  styles: MapTypeStyle[] = [];\r\n\r\n  /**\r\n   * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\r\n   * used to\r\n   * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\r\n   */\r\n  usePanning: boolean = false;\r\n\r\n  /**\r\n   * The initial enabled/disabled state of the Street View Pegman control.\r\n   * This control is part of the default UI, and should be set to false when displaying a map type\r\n   * on which the Street View road overlay should not appear (e.g. a non-Earth map type).\r\n   */\r\n  streetViewControl: boolean = true;\r\n\r\n  /**\r\n   * Sets the viewport to contain the given bounds.\r\n   */\r\n  fitBounds: LatLngBoundsLiteral|LatLngBounds = null;\r\n\r\n  /**\r\n   * The initial enabled/disabled state of the Scale control. This is disabled by default.\r\n   */\r\n  scaleControl: boolean = false;\r\n\r\n  /**\r\n   * The initial enabled/disabled state of the Map type control.\r\n   */\r\n  mapTypeControl: boolean = false;\r\n\r\n  /**\r\n   * Map option attributes that can change over time\r\n   */\r\n  private static _mapOptionsAttributes: string[] = [\r\n    'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',\r\n    'keyboardShortcuts', 'zoomControl', 'styles', 'streetViewControl', 'zoom', 'mapTypeControl',\r\n    'minZoom', 'maxZoom'\r\n  ];\r\n\r\n  private _observableSubscriptions: Subscription[] = [];\r\n\r\n  /**\r\n   * This event emitter gets emitted when the user clicks on the map (but not when they click on a\r\n   * marker or infoWindow).\r\n   */\r\n  mapClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event emitter gets emitted when the user right-clicks on the map (but not when they click\r\n   * on a marker or infoWindow).\r\n   */\r\n  mapRightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event emitter gets emitted when the user double-clicks on the map (but not when they click\r\n   * on a marker or infoWindow).\r\n   */\r\n  mapDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event emitter is fired when the map center changes.\r\n   */\r\n  centerChange: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\r\n\r\n  /**\r\n   * This event is fired when the viewport bounds have changed.\r\n   */\r\n  boundsChange: EventEmitter<LatLngBounds> = new EventEmitter<LatLngBounds>();\r\n\r\n  /**\r\n   * This event is fired when the map becomes idle after panning or zooming.\r\n   */\r\n  idle: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * This event is fired when the zoom level has changed.\r\n   */\r\n  zoomChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  constructor(private _elem: ElementRef, private _mapsWrapper: GoogleMapsAPIWrapper) {}\r\n\r\n  ngOnInit() {\r\n    // todo: this should be solved with a new component and a viewChild decorator\r\n    const container = this._elem.nativeElement.querySelector('.sebm-google-map-container-inner');\r\n    this._initMapInstance(container);\r\n  }\r\n\r\n  private _initMapInstance(el: HTMLElement) {\r\n    this._mapsWrapper.createMap(el, {\r\n      center: {lat: this.latitude || 0, lng: this.longitude || 0},\r\n      zoom: this.zoom,\r\n      minZoom: this.minZoom,\r\n      maxZoom: this.maxZoom,\r\n      disableDefaultUI: this.disableDefaultUI,\r\n      backgroundColor: this.backgroundColor,\r\n      draggable: this.draggable,\r\n      draggableCursor: this.draggableCursor,\r\n      draggingCursor: this.draggingCursor,\r\n      keyboardShortcuts: this.keyboardShortcuts,\r\n      zoomControl: this.zoomControl,\r\n      styles: this.styles,\r\n      streetViewControl: this.streetViewControl,\r\n      scaleControl: this.scaleControl,\r\n      mapTypeControl: this.mapTypeControl\r\n    });\r\n\r\n    // register event listeners\r\n    this._handleMapCenterChange();\r\n    this._handleMapZoomChange();\r\n    this._handleMapMouseEvents();\r\n    this._handleBoundsChange();\r\n    this._handleIdleEvent();\r\n  }\r\n\r\n  \r\n  ngOnDestroy() {\r\n    // unsubscribe all registered observable subscriptions\r\n    this._observableSubscriptions.forEach((s) => s.unsubscribe());\r\n  }\r\n\r\n  ngOnChanges(changes: {[propName: string]: SimpleChange}) {\r\n    this._updateMapOptionsChanges(changes);\r\n    this._updatePosition(changes);\r\n  }\r\n\r\n  private _updateMapOptionsChanges(changes: {[propName: string]: SimpleChange}) {\r\n    let options: {[propName: string]: any} = {};\r\n    let optionKeys =\r\n        Object.keys(changes).filter(k => SebmGoogleMap._mapOptionsAttributes.indexOf(k) !== -1);\r\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\r\n    this._mapsWrapper.setMapOptions(options);\r\n  }\r\n\r\n  /**\r\n   * Triggers a resize event on the google map instance.\r\n   * Returns a promise that gets resolved after the event was triggered.\r\n   */\r\n  triggerResize(): Promise<void> {\r\n    // Note: When we would trigger the resize event and show the map in the same turn (which is a\r\n    // common case for triggering a resize event), then the resize event would not\r\n    // work (to show the map), so we trigger the event in a timeout.\r\n    return new Promise<void>((resolve) => {\r\n      setTimeout(\r\n          () => { return this._mapsWrapper.triggerMapEvent('resize').then(() => resolve()); });\r\n    });\r\n  }\r\n\r\n  private _updatePosition(changes: {[propName: string]: SimpleChange}) {\r\n    if (changes['latitude'] == null && changes['longitude'] == null &&\r\n        changes['fitBounds'] == null) {\r\n      // no position update needed\r\n      return;\r\n    }\r\n\r\n    // we prefer fitBounds in changes\r\n    if (changes['fitBounds'] && this.fitBounds != null) {\r\n      this._fitBounds();\r\n      return;\r\n    }\r\n\r\n    if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\r\n      return;\r\n    }\r\n    let newCenter = {\r\n      lat: this.latitude,\r\n      lng: this.longitude,\r\n    };\r\n    if (this.usePanning) {\r\n      this._mapsWrapper.panTo(newCenter);\r\n    } else {\r\n      this._mapsWrapper.setCenter(newCenter);\r\n    }\r\n  }\r\n\r\n  private _fitBounds() {\r\n    if (this.usePanning) {\r\n      this._mapsWrapper.panToBounds(this.fitBounds);\r\n      return;\r\n    }\r\n    this._mapsWrapper.fitBounds(this.fitBounds);\r\n  }\r\n\r\n  private _handleMapCenterChange() {\r\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('center_changed').subscribe(() => {\r\n      this._mapsWrapper.getCenter().then((center: LatLng) => {\r\n        this.latitude = center.lat();\r\n        this.longitude = center.lng();\r\n        this.centerChange.emit(<LatLngLiteral>{lat: this.latitude, lng: this.longitude});\r\n      });\r\n    });\r\n    this._observableSubscriptions.push(s);\r\n  }\r\n\r\n  private _handleBoundsChange() {\r\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('bounds_changed').subscribe(() => {\r\n      this._mapsWrapper.getBounds().then(\r\n          (bounds: LatLngBounds) => { this.boundsChange.emit(bounds); });\r\n    });\r\n    this._observableSubscriptions.push(s);\r\n  }\r\n\r\n  private _handleMapZoomChange() {\r\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('zoom_changed').subscribe(() => {\r\n      this._mapsWrapper.getZoom().then((z: number) => {\r\n        this.zoom = z;\r\n        this.zoomChange.emit(z);\r\n      });\r\n    });\r\n    this._observableSubscriptions.push(s);\r\n  }\r\n\r\n  private _handleIdleEvent() {\r\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('idle').subscribe(\r\n        () => { this.idle.emit(void 0); });\r\n    this._observableSubscriptions.push(s);\r\n  }\r\n\r\n  private _handleMapMouseEvents() {\r\n    interface Emitter {\r\n      emit(value: any): void;\r\n    }\r\n    type Event = {name: string, emitter: Emitter};\r\n\r\n    const events: Event[] = [\r\n      {name: 'click', emitter: this.mapClick},\r\n      {name: 'rightclick', emitter: this.mapRightClick},\r\n    ];\r\n\r\n    events.forEach((e: Event) => {\r\n      const s = this._mapsWrapper.subscribeToMapEvent<{latLng: LatLng}>(e.name).subscribe(\r\n          (event: {latLng: LatLng}) => {\r\n            const value = <MouseEvent>{coords: {lat: event.latLng.lat(), lng: event.latLng.lng()}};\r\n            e.emitter.emit(value);\r\n          });\r\n      this._observableSubscriptions.push(s);\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'sebm-google-map',\r\n  providers: [\r\n    GoogleMapsAPIWrapper, MarkerManager, InfoWindowManager, CircleManager, PolylineManager,\r\n    PolygonManager, KmlLayerManager\r\n  ],\r\n  inputs: [\r\n    'longitude', 'latitude', 'zoom', 'minZoom', 'maxZoom', 'draggable: mapDraggable',\r\n    'disableDoubleClickZoom', 'disableDefaultUI', 'scrollwheel', 'backgroundColor', 'draggableCursor',\r\n    'draggingCursor', 'keyboardShortcuts', 'zoomControl', 'styles', 'usePanning', 'streetViewControl',\r\n    'fitBounds', 'scaleControl', 'mapTypeControl'\r\n  ],\r\n  outputs: [\r\n    'mapClick', 'mapRightClick', 'mapDblClick', 'centerChange', 'idle', 'boundsChange', 'zoomChange'\r\n  ],\r\n  host: {'[class.sebm-google-map-container]': 'true'},\r\n  styles: [`\r\n    .sebm-google-map-container-inner {\r\n      width: inherit;\r\n      height: inherit;\r\n    }\r\n    .sebm-google-map-content {\r\n      display:none;\r\n    }\r\n  `],\r\n  template: `\r\n    <div class='sebm-google-map-container-inner'></div>\r\n    <div class='sebm-google-map-content'>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: GoogleMapsAPIWrapper, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}