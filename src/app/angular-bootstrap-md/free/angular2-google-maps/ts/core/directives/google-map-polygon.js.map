{"version":3,"sources":["../../../../../../../src/app/typescripts/free/angular2-google-maps/ts/core/directives/google-map-polygon.ts"],"names":[],"mappings":"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","file":"google-map-polygon.js","sourceRoot":"","sourcesContent":["import { AfterContentInit, Directive, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\nimport { LatLng, LatLngLiteral, PolyMouseEvent, PolygonOptions } from '../services/google-maps-types';\r\nimport { PolygonManager } from '../services/managers/polygon-manager';\r\n\r\n/**\r\n * SebmGoogleMapPolygon renders a polygon on a {@link SebmGoogleMap}\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from '@angular/core';\r\n * import { SebmGoogleMap, SebmGooglePolygon, LatLngLiteral } from 'angular2-maps/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    .semb-map-container {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <semb-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *      <semb-map-polygon [paths]=\"paths\">\r\n *      </semb-map-polygon>\r\n *    </semb-map>\r\n *  `\r\n * })\r\n * export class MyMapCmp {\r\n *   lat: number = 0;\r\n *   lng: number = 0;\r\n *   zoom: number = 10;\r\n *   paths: Array<LatLngLiteral> = [\r\n *     { lat: 0,  lng: 10 },\r\n *     { lat: 0,  lng: 20 },\r\n *     { lat: 10, lng: 20 },\r\n *     { lat: 10, lng: 10 },\r\n *     { lat: 0,  lng: 10 }\r\n *   ]\r\n *   // Nesting paths will create a hole where they overlap;\r\n *   nestedPaths: Array<Array<LatLngLiteral>> = [[\r\n *     { lat: 0,  lng: 10 },\r\n *     { lat: 0,  lng: 20 },\r\n *     { lat: 10, lng: 20 },\r\n *     { lat: 10, lng: 10 },\r\n *     { lat: 0,  lng: 10 }\r\n *   ], [\r\n *     { lat: 0, lng: 15 },\r\n *     { lat: 0, lng: 20 },\r\n *     { lat: 5, lng: 20 },\r\n *     { lat: 5, lng: 15 },\r\n *     { lat: 0, lng: 15 }\r\n *   ]]\r\n * }\r\n * ```\r\n */\r\n\r\nexport class SebmGoogleMapPolygon implements OnDestroy, OnChanges, AfterContentInit {\r\n  /**\r\n   * Indicates whether this Polygon handles mouse events. Defaults to true.\r\n   */\r\n  clickable: boolean = true;\r\n  /**\r\n   * If set to true, the user can drag this shape over the map. The geodesic\r\n   * property defines the mode of dragging. Defaults to false.\r\n   */\r\n  draggable: boolean = false;\r\n  /**\r\n   * If set to true, the user can edit this shape by dragging the control\r\n   * points shown at the vertices and on each segment. Defaults to false.\r\n   */\r\n  editable: boolean = false;\r\n  /**\r\n   * The fill color. All CSS3 colors are supported except for extended\r\n   * named colors.\r\n   */\r\n  fillColor: string;\r\n  /**\r\n   * The fill opacity between 0.0 and 1.0\r\n   */\r\n  fillOpacity: number;\r\n  /**\r\n   * When true, edges of the polygon are interpreted as geodesic and will\r\n   * follow the curvature of the Earth. When false, edges of the polygon are\r\n   * rendered as straight lines in screen space. Note that the shape of a\r\n   * geodesic polygon may appear to change when dragged, as the dimensions\r\n   * are maintained relative to the surface of the earth. Defaults to false.\r\n   */\r\n  geodesic: boolean = false;\r\n  /**\r\n   * The ordered sequence of coordinates that designates a closed loop.\r\n   * Unlike polylines, a polygon may consist of one or more paths.\r\n   *  As a result, the paths property may specify one or more arrays of\r\n   * LatLng coordinates. Paths are closed automatically; do not repeat the\r\n   * first vertex of the path as the last vertex. Simple polygons may be\r\n   * defined using a single array of LatLngs. More complex polygons may\r\n   * specify an array of arrays. Any simple arrays are converted into Arrays.\r\n   * Inserting or removing LatLngs from the Array will automatically update\r\n   * the polygon on the map.\r\n   */\r\n  paths: Array<LatLng|LatLngLiteral>|Array<Array<LatLng|LatLngLiteral>> = [];\r\n  /**\r\n   * The stroke color. All CSS3 colors are supported except for extended\r\n   * named colors.\r\n   */\r\n  strokeColor: string;\r\n  /**\r\n   * The stroke opacity between 0.0 and 1.0\r\n   */\r\n  strokeOpacity: number;\r\n  /**\r\n   * The stroke width in pixels.\r\n   */\r\n  strokeWeight: number;\r\n  /**\r\n   * Whether this polygon is visible on the map. Defaults to true.\r\n   */\r\n  visible: boolean;\r\n  /**\r\n   * The zIndex compared to other polys.\r\n   */\r\n  zIndex: number;\r\n\r\n  /**\r\n   * This event is fired when the DOM click event is fired on the Polygon.\r\n   */\r\n  polyClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\r\n\r\n  /**\r\n   * This event is fired when the DOM dblclick event is fired on the Polygon.\r\n   */\r\n  polyDblClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\r\n\r\n  /**\r\n   * This event is repeatedly fired while the user drags the polygon.\r\n   */\r\n  polyDrag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event is fired when the user stops dragging the polygon.\r\n   */\r\n  polyDragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event is fired when the user starts dragging the polygon.\r\n   */\r\n  polyDragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * This event is fired when the DOM mousedown event is fired on the Polygon.\r\n   */\r\n  polyMouseDown: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\r\n\r\n  /**\r\n   * This event is fired when the DOM mousemove event is fired on the Polygon.\r\n   */\r\n  polyMouseMove: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\r\n\r\n  /**\r\n   * This event is fired on Polygon mouseout.\r\n   */\r\n  polyMouseOut: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\r\n\r\n  /**\r\n   * This event is fired on Polygon mouseover.\r\n   */\r\n  polyMouseOver: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\r\n\r\n  /**\r\n   * This event is fired whe the DOM mouseup event is fired on the Polygon\r\n   */\r\n  polyMouseUp: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\r\n\r\n  /**\r\n   * This even is fired when the Polygon is right-clicked on.\r\n   */\r\n  polyRightClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\r\n\r\n  private static _polygonOptionsAttributes: Array<string> = [\r\n    'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\r\n    'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\r\n    'editable', 'visible'\r\n  ];\r\n\r\n  private _id: string;\r\n  private _polygonAddedToManager: boolean = false;\r\n  private _subscriptions: Subscription[] = [];\r\n\r\n  constructor(private _polygonManager: PolygonManager) {}\r\n\r\n  ngAfterContentInit() {\r\n    if (!this._polygonAddedToManager) {\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): any {\r\n    if (!this._polygonAddedToManager) {\r\n      this._init();\r\n      return;\r\n    }\r\n\r\n    this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\r\n  }\r\n\r\n  private _init() {\r\n    this._polygonManager.addPolygon(this);\r\n    this._polygonAddedToManager = true;\r\n    this._addEventListeners();\r\n  }\r\n\r\n  private _addEventListeners() {\r\n    const handlers = [\r\n      {name: 'click', handler: (ev: PolyMouseEvent) => this.polyClick.emit(ev)},\r\n      {name: 'dbclick', handler: (ev: PolyMouseEvent) => this.polyDblClick.emit(ev)},\r\n      {name: 'drag', handler: (ev: MouseEvent) => this.polyDrag.emit(ev)},\r\n      {name: 'dragend', handler: (ev: MouseEvent) => this.polyDragEnd.emit(ev)},\r\n      {name: 'dragstart', handler: (ev: MouseEvent) => this.polyDragStart.emit(ev)},\r\n      {name: 'mousedown', handler: (ev: PolyMouseEvent) => this.polyMouseDown.emit(ev)},\r\n      {name: 'mousemove', handler: (ev: PolyMouseEvent) => this.polyMouseMove.emit(ev)},\r\n      {name: 'mouseout', handler: (ev: PolyMouseEvent) => this.polyMouseOut.emit(ev)},\r\n      {name: 'mouseover', handler: (ev: PolyMouseEvent) => this.polyMouseOver.emit(ev)},\r\n      {name: 'mouseup', handler: (ev: PolyMouseEvent) => this.polyMouseUp.emit(ev)},\r\n      {name: 'rightclick', handler: (ev: PolyMouseEvent) => this.polyRightClick.emit(ev)},\r\n    ];\r\n    handlers.forEach((obj) => {\r\n      const os = this._polygonManager.createEventObservable(obj.name, this).subscribe(obj.handler);\r\n      this._subscriptions.push(os);\r\n    });\r\n  }\r\n\r\n  private _updatePolygonOptions(changes: SimpleChanges): PolygonOptions {\r\n    return Object.keys(changes)\r\n        .filter(k => SebmGoogleMapPolygon._polygonOptionsAttributes.indexOf(k) !== -1)\r\n        .reduce((obj: any, k: string) => {\r\n          obj[k] = changes[k].currentValue;\r\n          return obj;\r\n        }, {});\r\n  }\r\n\r\n  id(): string { return this._id; }\r\n\r\n  ngOnDestroy() {\r\n    this._polygonManager.deletePolygon(this);\r\n    // unsubscribe all registered observable subscriptions\r\n    this._subscriptions.forEach((s) => s.unsubscribe());\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'sebm-map-polygon',\r\n  inputs: [\r\n    'clickable',\r\n    'draggable: polyDraggable',\r\n    'editable',\r\n    'fillColor',\r\n    'fillOpacity',\r\n    'geodesic',\r\n    'paths',\r\n    'strokeColor',\r\n    'strokeOpacity',\r\n    'strokeWeight',\r\n    'visible',\r\n    'zIndex',\r\n  ],\r\n  outputs: [\r\n    'polyClick', 'polyDblClick', 'polyDrag', 'polyDragEnd', 'polyMouseDown', 'polyMouseMove',\r\n    'polyMouseOut', 'polyMouseOver', 'polyMouseUp', 'polyRightClick'\r\n  ]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: PolygonManager, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}