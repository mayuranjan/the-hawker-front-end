{"version":3,"sources":["../../../../../../../src/app/typescripts/free/angular2-google-maps/ts/core/services/google-maps-types.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,IAAI,MAAW,CAAC","file":"google-maps-types.js","sourceRoot":"","sourcesContent":["export var google: any;\r\n\r\nexport interface GoogleMap extends MVCObject {\r\n  constructor(el: HTMLElement, opts?: MapOptions): void;\r\n  panTo(latLng: LatLng|LatLngLiteral): void;\r\n  setZoom(zoom: number): void;\r\n  getCenter(): LatLng;\r\n  setCenter(latLng: LatLng|LatLngLiteral): void;\r\n  getBounds(): LatLngBounds;\r\n  getZoom(): number;\r\n  setOptions(options: MapOptions): void;\r\n  panToBounds(latLngBounds: LatLngBounds|LatLngBoundsLiteral): void;\r\n  fitBounds(bounds: LatLngBounds|LatLngBoundsLiteral): void;\r\n}\r\n\r\nexport interface LatLng {\r\n  constructor(lat: number, lng: number): void;\r\n  lat(): number;\r\n  lng(): number;\r\n}\r\n\r\nexport interface Marker extends MVCObject {\r\n  constructor(options?: MarkerOptions): void;\r\n  setMap(map: GoogleMap): void;\r\n  setPosition(latLng: LatLng|LatLngLiteral): void;\r\n  setTitle(title: string): void;\r\n  setLabel(label: string|MarkerLabel): void;\r\n  setDraggable(draggable: boolean): void;\r\n  setIcon(icon: string): void;\r\n  setOpacity(opacity: number): void;\r\n  setVisible(visible: boolean): void;\r\n  setZIndex(zIndex: number): void;\r\n  getLabel(): MarkerLabel;\r\n}\r\n\r\nexport interface MarkerOptions {\r\n  position: LatLng|LatLngLiteral;\r\n  title?: string;\r\n  map?: GoogleMap;\r\n  label?: string|MarkerLabel;\r\n  draggable?: boolean;\r\n  icon?: string;\r\n  opacity?: number;\r\n  visible?: boolean;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface MarkerLabel {\r\n  color: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n  fontWeight: string;\r\n  text: string;\r\n}\r\n\r\nexport interface Circle extends MVCObject {\r\n  getBounds(): LatLngBounds;\r\n  getCenter(): LatLng;\r\n  getDraggable(): boolean;\r\n  getEditable(): boolean;\r\n  getMap(): GoogleMap;\r\n  getRadius(): number;\r\n  getVisible(): boolean;\r\n  setCenter(center: LatLng|LatLngLiteral): void;\r\n  setDraggable(draggable: boolean): void;\r\n  setEditable(editable: boolean): void;\r\n  setMap(map: GoogleMap): void;\r\n  setOptions(options: CircleOptions): void;\r\n  setRadius(radius: number): void;\r\n  setVisible(visible: boolean): void;\r\n}\r\n\r\nexport interface CircleOptions {\r\n  center?: LatLng|LatLngLiteral;\r\n  clickable?: boolean;\r\n  draggable?: boolean;\r\n  editable?: boolean;\r\n  fillColor?: string;\r\n  fillOpacity?: number;\r\n  map?: GoogleMap;\r\n  radius?: number;\r\n  strokeColor?: string;\r\n  strokeOpacity?: number;\r\n  strokePosition?: 'CENTER'|'INSIDE'|'OUTSIDE';\r\n  strokeWeight?: number;\r\n  visible?: boolean;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface LatLngBounds {\r\n  contains(latLng: LatLng): boolean;\r\n  equals(other: LatLngBounds|LatLngBoundsLiteral): boolean;\r\n  extend(point: LatLng): void;\r\n  getCenter(): LatLng;\r\n  getNorthEast(): LatLng;\r\n  getSouthWest(): LatLng;\r\n  intersects(other: LatLngBounds|LatLngBoundsLiteral): boolean;\r\n  isEmpty(): boolean;\r\n  toJSON(): LatLngBoundsLiteral;\r\n  toSpan(): LatLng;\r\n  toString(): string;\r\n  toUrlValue(precision?: number): string;\r\n  union(other: LatLngBounds|LatLngBoundsLiteral): LatLngBounds;\r\n}\r\n\r\nexport interface LatLngBoundsLiteral {\r\n  east: number;\r\n  north: number;\r\n  south: number;\r\n  west: number;\r\n}\r\n\r\nexport interface LatLngLiteral {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\nexport interface MouseEvent { latLng: LatLng; }\r\n\r\nexport interface MapOptions {\r\n  center?: LatLng|LatLngLiteral;\r\n  zoom?: number;\r\n  minZoom?: number;\r\n  maxZoom?: number;\r\n  disableDoubleClickZoom?: boolean;\r\n  disableDefaultUI?: boolean;\r\n  backgroundColor?: string;\r\n  draggable?: boolean;\r\n  draggableCursor?: string;\r\n  draggingCursor?: string;\r\n  keyboardShortcuts?: boolean;\r\n  zoomControl?: boolean;\r\n  styles?: MapTypeStyle[];\r\n  streetViewControl?: boolean;\r\n  scaleControl?: boolean;\r\n  mapTypeControl?: boolean;\r\n}\r\n\r\nexport interface MapTypeStyle {\r\n  elementType?: 'all'|'geometry'|'geometry.fill'|'geometry.stroke'|'labels'|'labels.icon'|\r\n      'labels.text'|'labels.text.fill'|'labels.text.stroke';\r\n  featureType?: 'administrative'|'administrative.country'|'administrative.land_parcel'|\r\n      'administrative.locality'|'administrative.neighborhood'|'administrative.province'|'all'|\r\n      'landscape'|'landscape.man_made'|'landscape.natural'|'landscape.natural.landcover'|\r\n      'landscape.natural.terrain'|'poi'|'poi.attraction'|'poi.business'|'poi.government'|\r\n      'poi.medical'|'poi.park'|'poi.place_of_worship'|'poi.school'|'poi.sports_complex'|'road'|\r\n      'road.arterial'|'road.highway'|'road.highway.controlled_access'|'road.local'|'transit'|\r\n      'transit.line'|'transit.station'|'transit.station.airport'|'transit.station.bus'|\r\n      'transit.station.rail'|'water';\r\n  stylers: MapTypeStyler[];\r\n}\r\n\r\n/**\r\n *  If more than one key is specified in a single MapTypeStyler, all but one will be ignored.\r\n */\r\nexport interface MapTypeStyler {\r\n  color?: string;\r\n  gamma?: number;\r\n  hue?: string;\r\n  invert_lightness?: boolean;\r\n  lightness?: number;\r\n  saturation?: number;\r\n  visibility?: string;\r\n  weight?: number;\r\n}\r\n\r\nexport interface InfoWindow extends MVCObject {\r\n  constructor(opts?: InfoWindowOptions): void;\r\n  close(): void;\r\n  getContent(): string|Node;\r\n  getPosition(): LatLng;\r\n  getZIndex(): number;\r\n  open(map?: GoogleMap, anchor?: MVCObject): void;\r\n  setContent(content: string|Node): void;\r\n  setOptions(options: InfoWindowOptions): void;\r\n  setPosition(position: LatLng|LatLngLiteral): void;\r\n  setZIndex(zIndex: number): void;\r\n}\r\n\r\nexport interface MVCObject { addListener(eventName: string, handler: Function): MapsEventListener; }\r\n\r\nexport interface MapsEventListener { remove(): void; }\r\n\r\nexport interface Size {\r\n  height: number;\r\n  width: number;\r\n  constructor(width: number, height: number, widthUnit?: string, heightUnit?: string): void;\r\n  equals(other: Size): boolean;\r\n  toString(): string;\r\n}\r\n\r\nexport interface InfoWindowOptions {\r\n  content?: string|Node;\r\n  disableAutoPan?: boolean;\r\n  maxWidth?: number;\r\n  pixelOffset?: Size;\r\n  position?: LatLng|LatLngLiteral;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n  equals(other: Point): boolean;\r\n  toString(): string;\r\n}\r\n\r\nexport interface GoogleSymbol {\r\n  anchor?: Point;\r\n  fillColor?: string;\r\n  fillOpacity?: string;\r\n  labelOrigin?: Point;\r\n  path?: string;\r\n  rotation?: number;\r\n  scale?: number;\r\n  strokeColor?: string;\r\n  strokeOpacity?: number;\r\n  strokeWeight?: number;\r\n}\r\n\r\nexport interface IconSequence {\r\n  fixedRotation?: boolean;\r\n  icon?: GoogleSymbol;\r\n  offset?: string;\r\n  repeat?: string;\r\n}\r\n\r\nexport interface PolylineOptions {\r\n  clickable?: boolean;\r\n  draggable?: boolean;\r\n  editable?: boolean;\r\n  geodesic?: boolean;\r\n  icon?: Array<IconSequence>;\r\n  map?: GoogleMap;\r\n  path?: Array<LatLng>|Array<LatLng|LatLngLiteral>;\r\n  strokeColor?: string;\r\n  strokeOpacity?: number;\r\n  strokeWeight?: number;\r\n  visible?: boolean;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface Polyline extends MVCObject {\r\n  getDraggable(): boolean;\r\n  getEditable(): boolean;\r\n  getMap(): GoogleMap;\r\n  getPath(): Array<LatLng>;\r\n  getVisible(): boolean;\r\n  setDraggable(draggable: boolean): void;\r\n  setEditable(editable: boolean): void;\r\n  setMap(map: GoogleMap): void;\r\n  setOptions(options: PolylineOptions): void;\r\n  setPath(path: Array<LatLng|LatLngLiteral>): void;\r\n  setVisible(visible: boolean): void;\r\n}\r\n\r\n/**\r\n * PolyMouseEvent gets emitted when the user triggers mouse events on a polyline.\r\n */\r\nexport interface PolyMouseEvent extends MouseEvent {\r\n  edge: number;\r\n  path: number;\r\n  vertex: number;\r\n}\r\n\r\nexport interface PolygonOptions {\r\n  clickable?: boolean;\r\n  draggable?: boolean;\r\n  editable?: boolean;\r\n  fillColor?: string;\r\n  fillOpacity?: number;\r\n  geodesic?: boolean;\r\n  icon?: Array<IconSequence>;\r\n  map?: GoogleMap;\r\n  paths?: Array<LatLng|LatLngLiteral>|Array<Array<LatLng|LatLngLiteral>>;\r\n  strokeColor?: string;\r\n  strokeOpacity?: number;\r\n  strokeWeight?: number;\r\n  visible?: boolean;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface Polygon extends MVCObject {\r\n  getDraggable(): boolean;\r\n  getEditable(): boolean;\r\n  getMap(): GoogleMap;\r\n  getPath(): Array<LatLng>;\r\n  getPaths(): Array<Array<LatLng>>;\r\n  getVisible(): boolean;\r\n  setDraggable(draggable: boolean): void;\r\n  setEditable(editable: boolean): void;\r\n  setMap(map: GoogleMap): void;\r\n  setPath(path: Array<LatLng>|Array<LatLng|LatLngLiteral>): void;\r\n  setOptions(options: PolygonOptions): void;\r\n  setPaths(paths: Array<Array<LatLng|LatLngLiteral>>|Array<LatLng|LatLngLiteral>): void;\r\n  setVisible(visible: boolean): void;\r\n}\r\n\r\nexport interface KmlLayer extends MVCObject {\r\n  getDefaultViewport(): LatLngBounds;\r\n  getMap(): GoogleMap;\r\n  getMetadata(): KmlLayerMetadata;\r\n  getStatus(): KmlLayerStatus;\r\n  getUrl(): string;\r\n  getZIndex(): number;\r\n  setMap(map: GoogleMap): void;\r\n  setOptions(options: KmlLayerOptions): void;\r\n  setUrl(url: string): void;\r\n  setZIndex(zIndex: number): void;\r\n}\r\n\r\n/**\r\n * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerStatus\r\n */\r\nexport type KmlLayerStatus = 'DOCUMENT_NOT_FOUND' |\r\n    'DOCUMENT_TOO_LARGE' | 'FETCH_ERROR' | 'INVALID_DOCUMENT' | 'INVALID_REQUEST' |\r\n    'LIMITS_EXCEEDED' | 'OK' | 'TIMED_OUT' | 'UNKNOWN';\r\n\r\n/**\r\n * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerMetadata\r\n */\r\nexport interface KmlLayerMetadata {\r\n  author: KmlAuthor;\r\n  description: string;\r\n  hasScreenOverlays: boolean;\r\n  name: string;\r\n  snippet: string;\r\n}\r\n\r\nexport interface KmlAuthor {\r\n  email: string;\r\n  name: string;\r\n  uri: string;\r\n}\r\n\r\nexport interface KmlLayerOptions {\r\n  clickable?: boolean;\r\n  map?: GoogleMap;\r\n  preserveViewport?: boolean;\r\n  screenOverlays?: boolean;\r\n  suppressInfoWindows?: boolean;\r\n  url?: string;\r\n  zIndex?: number;\r\n}\r\n\r\nexport interface KmlFeatureData {\r\n  author: KmlAuthor;\r\n  description: string;\r\n  id: string;\r\n  infoWindowHtml: string;\r\n  name: string;\r\n  snippet: string;\r\n}\r\n\r\nexport interface KmlMouseEvent extends MouseEvent {\r\n  featureData: KmlFeatureData;\r\n  pixelOffset: Size;\r\n}\r\n"]}