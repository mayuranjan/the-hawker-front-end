{"version":3,"sources":["../../../../../../../src/app/typescripts/free/angular2-google-maps/ts/core/services/google-maps-api-wrapper.ts"],"names":[],"mappings":"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","file":"google-maps-api-wrapper.js","sourceRoot":"","sourcesContent":["import {Injectable, NgZone} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Observer} from 'rxjs/Observer';\r\n\r\nimport * as mapTypes from './google-maps-types';\r\nimport {Polyline} from './google-maps-types';\r\nimport {PolylineOptions} from './google-maps-types';\r\nimport {MapsAPILoader} from './maps-api-loader/maps-api-loader';\r\n\r\n// todo: add types for this\r\ndeclare var google: any;\r\n\r\n/**\r\n * Wrapper class that handles the communication with the Google Maps Javascript\r\n * API v3\r\n */\r\n\r\nexport class GoogleMapsAPIWrapper {\r\n  private _map: Promise<mapTypes.GoogleMap>;\r\n  private _mapResolver: (value?: mapTypes.GoogleMap) => void;\r\n\r\n  constructor(private _loader: MapsAPILoader, private _zone: NgZone) {\r\n    this._map =\r\n        new Promise<mapTypes.GoogleMap>((resolve: () => void) => { this._mapResolver = resolve; });\r\n  }\r\n\r\n  createMap(el: HTMLElement, mapOptions: mapTypes.MapOptions): Promise<void> {\r\n    return this._loader.load().then(() => {\r\n      const map = new google.maps.Map(el, mapOptions);\r\n      this._mapResolver(<mapTypes.GoogleMap>map);\r\n      return;\r\n    });\r\n  }\r\n\r\n  setMapOptions(options: mapTypes.MapOptions) {\r\n    this._map.then((m: mapTypes.GoogleMap) => { m.setOptions(options); });\r\n  }\r\n\r\n  /**\r\n   * Creates a google map marker with the map context\r\n   */\r\n  createMarker(options: mapTypes.MarkerOptions = <mapTypes.MarkerOptions>{}):\r\n      Promise<mapTypes.Marker> {\r\n    return this._map.then((map: mapTypes.GoogleMap) => {\r\n      options.map = map;\r\n      return new google.maps.Marker(options);\r\n    });\r\n  }\r\n\r\n  createInfoWindow(options?: mapTypes.InfoWindowOptions): Promise<mapTypes.InfoWindow> {\r\n    return this._map.then(() => { return new google.maps.InfoWindow(options); });\r\n  }\r\n\r\n  /**\r\n   * Creates a google.map.Circle for the current map.\r\n   */\r\n  createCircle(options: mapTypes.CircleOptions): Promise<mapTypes.Circle> {\r\n    return this._map.then((map: mapTypes.GoogleMap) => {\r\n      options.map = map;\r\n      return new google.maps.Circle(options);\r\n    });\r\n  }\r\n\r\n  createPolyline(options: PolylineOptions): Promise<Polyline> {\r\n    return this.getNativeMap().then((map: mapTypes.GoogleMap) => {\r\n      let line = new google.maps.Polyline(options);\r\n      line.setMap(map);\r\n      return line;\r\n    });\r\n  }\r\n\r\n  createPolygon(options: mapTypes.PolygonOptions): Promise<mapTypes.Polyline> {\r\n    return this.getNativeMap().then((map: mapTypes.GoogleMap) => {\r\n      let polygon = new google.maps.Polygon(options);\r\n      polygon.setMap(map);\r\n      return polygon;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Determines if given coordinates are insite a Polygon path.\r\n   */\r\n  containsLocation(latLng: mapTypes.LatLngLiteral, polygon: mapTypes.Polygon): Promise<boolean> {\r\n    return google.maps.geometry.poly.containsLocation(latLng, polygon);\r\n  }\r\n\r\n  subscribeToMapEvent<E>(eventName: string): Observable<E> {\r\n    return Observable.create((observer: Observer<E>) => {\r\n      this._map.then((m: mapTypes.GoogleMap) => {\r\n        m.addListener(eventName, (arg: E) => { this._zone.run(() => observer.next(arg)); });\r\n      });\r\n    });\r\n  }\r\n\r\n  setCenter(latLng: mapTypes.LatLngLiteral): Promise<void> {\r\n    return this._map.then((map: mapTypes.GoogleMap) => map.setCenter(latLng));\r\n  }\r\n\r\n  getZoom(): Promise<number> { return this._map.then((map: mapTypes.GoogleMap) => map.getZoom()); }\r\n\r\n  getBounds(): Promise<mapTypes.LatLngBounds> {\r\n    return this._map.then((map: mapTypes.GoogleMap) => map.getBounds());\r\n  }\r\n\r\n  setZoom(zoom: number): Promise<void> {\r\n    return this._map.then((map: mapTypes.GoogleMap) => map.setZoom(zoom));\r\n  }\r\n\r\n  getCenter(): Promise<mapTypes.LatLng> {\r\n    return this._map.then((map: mapTypes.GoogleMap) => map.getCenter());\r\n  }\r\n\r\n  panTo(latLng: mapTypes.LatLng|mapTypes.LatLngLiteral): Promise<void> {\r\n    return this._map.then((map) => map.panTo(latLng));\r\n  }\r\n\r\n  fitBounds(latLng: mapTypes.LatLngBounds|mapTypes.LatLngBoundsLiteral): Promise<void> {\r\n    return this._map.then((map) => map.fitBounds(latLng));\r\n  }\r\n\r\n  panToBounds(latLng: mapTypes.LatLngBounds|mapTypes.LatLngBoundsLiteral): Promise<void> {\r\n    return this._map.then((map) => map.panToBounds(latLng));\r\n  }\r\n\r\n  /**\r\n   * Returns the native Google Maps Map instance. Be careful when using this instance directly.\r\n   */\r\n  getNativeMap(): Promise<mapTypes.GoogleMap> { return this._map; }\r\n\r\n  /**\r\n   * Triggers the given event name on the map instance.\r\n   */\r\n  triggerMapEvent(eventName: string): Promise<void> {\r\n    return this._map.then((m) => google.maps.event.trigger(m, eventName));\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MapsAPILoader, },\n{type: NgZone, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}