{"version":3,"sources":["../../../../../../../../src/app/typescripts/free/angular2-google-maps/ts/core/services/managers/circle-manager.ts"],"names":[],"mappings":"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","file":"circle-manager.js","sourceRoot":"","sourcesContent":["import {Injectable, NgZone} from '@angular/core';\r\n\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Observer} from 'rxjs/Observer';\r\n\r\nimport {SebmGoogleMapCircle} from '../../directives/google-map-circle';\r\nimport {GoogleMapsAPIWrapper} from '../google-maps-api-wrapper';\r\nimport * as mapTypes from '../google-maps-types';\r\n\r\n\r\nexport class CircleManager {\r\n  private _circles: Map<SebmGoogleMapCircle, Promise<mapTypes.Circle>> =\r\n      new Map<SebmGoogleMapCircle, Promise<mapTypes.Circle>>();\r\n\r\n  constructor(private _apiWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\r\n\r\n  addCircle(circle: SebmGoogleMapCircle) {\r\n    this._circles.set(circle, this._apiWrapper.createCircle({\r\n      center: {lat: circle.latitude, lng: circle.longitude},\r\n      clickable: circle.clickable,\r\n      draggable: circle.draggable,\r\n      editable: circle.editable,\r\n      fillColor: circle.fillColor,\r\n      fillOpacity: circle.fillOpacity,\r\n      radius: circle.radius,\r\n      strokeColor: circle.strokeColor,\r\n      strokeOpacity: circle.strokeOpacity,\r\n      strokePosition: circle.strokePosition,\r\n      strokeWeight: circle.strokeWeight,\r\n      visible: circle.visible,\r\n      zIndex: circle.zIndex\r\n    }));\r\n  };\r\n\r\n  /**\r\n   * Removes the given circle from the map.\r\n   */\r\n  removeCircle(circle: SebmGoogleMapCircle): Promise<void> {\r\n    return this._circles.get(circle).then((c) => {\r\n      c.setMap(null);\r\n      this._circles.delete(circle);\r\n    });\r\n  }\r\n\r\n  setOptions(circle: SebmGoogleMapCircle, options: mapTypes.CircleOptions): Promise<void> {\r\n    return this._circles.get(circle).then((c) => c.setOptions(options));\r\n  };\r\n\r\n  getBounds(circle: SebmGoogleMapCircle): Promise<mapTypes.LatLngBounds> {\r\n    return this._circles.get(circle).then((c) => c.getBounds());\r\n  };\r\n\r\n  getCenter(circle: SebmGoogleMapCircle): Promise<mapTypes.LatLng> {\r\n    return this._circles.get(circle).then((c) => c.getCenter());\r\n  };\r\n\r\n  getRadius(circle: SebmGoogleMapCircle): Promise<number> {\r\n    return this._circles.get(circle).then((c) => c.getRadius());\r\n  }\r\n\r\n  setCenter(circle: SebmGoogleMapCircle): Promise<void> {\r\n    return this._circles.get(circle).then(\r\n        (c) => { return c.setCenter({lat: circle.latitude, lng: circle.longitude}); });\r\n  };\r\n\r\n  setEditable(circle: SebmGoogleMapCircle): Promise<void> {\r\n    return this._circles.get(circle).then((c) => { return c.setEditable(circle.editable); });\r\n  };\r\n\r\n  setDraggable(circle: SebmGoogleMapCircle): Promise<void> {\r\n    return this._circles.get(circle).then((c) => { return c.setDraggable(circle.draggable); });\r\n  };\r\n\r\n  setVisible(circle: SebmGoogleMapCircle): Promise<void> {\r\n    return this._circles.get(circle).then((c) => { return c.setVisible(circle.visible); });\r\n  };\r\n\r\n  setRadius(circle: SebmGoogleMapCircle): Promise<void> {\r\n    return this._circles.get(circle).then((c) => { return c.setRadius(circle.radius); });\r\n  };\r\n\r\n  createEventObservable<T>(eventName: string, circle: SebmGoogleMapCircle): Observable<T> {\r\n    return Observable.create((observer: Observer<T>) => {\r\n      let listener: mapTypes.MapsEventListener = null;\r\n      this._circles.get(circle).then((c) => {\r\n        listener = c.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\r\n      });\r\n\r\n      return () => {\r\n        if (listener !== null) {\r\n          listener.remove();\r\n        }\r\n      };\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: GoogleMapsAPIWrapper, },\n{type: NgZone, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}