{"version":3,"sources":["../../../../../../../../src/app/typescripts/free/angular2-google-maps/ts/core/services/managers/polygon-manager.ts"],"names":[],"mappings":"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","file":"polygon-manager.js","sourceRoot":"","sourcesContent":["import {Injectable, NgZone} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Observer} from 'rxjs/Observer';\r\n\r\nimport {SebmGoogleMapPolygon} from '../../directives/google-map-polygon';\r\nimport {GoogleMapsAPIWrapper} from '../google-maps-api-wrapper';\r\nimport {Polygon} from '../google-maps-types';\r\n\r\n\r\nexport class PolygonManager {\r\n  private _polygons: Map<SebmGoogleMapPolygon, Promise<Polygon>> =\r\n      new Map<SebmGoogleMapPolygon, Promise<Polygon>>();\r\n\r\n  constructor(private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\r\n\r\n  addPolygon(path: SebmGoogleMapPolygon) {\r\n    const polygonPromise = this._mapsWrapper.createPolygon({\r\n      clickable: path.clickable,\r\n      draggable: path.draggable,\r\n      editable: path.editable,\r\n      fillColor: path.fillColor,\r\n      fillOpacity: path.fillOpacity,\r\n      geodesic: path.geodesic,\r\n      paths: path.paths,\r\n      strokeColor: path.strokeColor,\r\n      strokeOpacity: path.strokeOpacity,\r\n      strokeWeight: path.strokeWeight,\r\n      visible: path.visible,\r\n      zIndex: path.zIndex,\r\n    });\r\n    this._polygons.set(path, polygonPromise);\r\n  }\r\n\r\n  updatePolygon(polygon: SebmGoogleMapPolygon): Promise<void> {\r\n    const m = this._polygons.get(polygon);\r\n    if (m == null) {\r\n      return Promise.resolve();\r\n    }\r\n    return m.then((l: Polygon) => this._zone.run(() => { l.setPaths(polygon.paths); }));\r\n  }\r\n\r\n  setPolygonOptions(path: SebmGoogleMapPolygon, options: {[propName: string]: any}): Promise<void> {\r\n    return this._polygons.get(path).then((l: Polygon) => { l.setOptions(options); });\r\n  }\r\n\r\n  deletePolygon(paths: SebmGoogleMapPolygon): Promise<void> {\r\n    const m = this._polygons.get(paths);\r\n    if (m == null) {\r\n      return Promise.resolve();\r\n    }\r\n    return m.then((l: Polygon) => {\r\n      return this._zone.run(() => {\r\n        l.setMap(null);\r\n        this._polygons.delete(paths);\r\n      });\r\n    });\r\n  }\r\n\r\n  createEventObservable<T>(eventName: string, path: SebmGoogleMapPolygon): Observable<T> {\r\n    return Observable.create((observer: Observer<T>) => {\r\n      this._polygons.get(path).then((l: Polygon) => {\r\n        l.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\r\n      });\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: GoogleMapsAPIWrapper, },\n{type: NgZone, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}