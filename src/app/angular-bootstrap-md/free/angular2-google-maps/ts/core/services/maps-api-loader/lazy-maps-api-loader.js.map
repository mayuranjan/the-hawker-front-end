{"version":3,"sources":["../../../../../../../../src/app/typescripts/free/angular2-google-maps/ts/core/services/maps-api-loader/lazy-maps-api-loader.ts"],"names":[],"mappings":"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","file":"lazy-maps-api-loader.js","sourceRoot":"","sourcesContent":["import {Inject, Injectable, OpaqueToken} from '@angular/core';\r\n\r\nimport {DocumentRef, WindowRef} from '../../utils/browser-globals';\r\n\r\nimport {MapsAPILoader} from './maps-api-loader';\r\n\r\nexport enum GoogleMapsScriptProtocol {\r\n  HTTP = 1,\r\n  HTTPS = 2,\r\n  AUTO = 3\r\n}\r\n\r\n/**\r\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\r\n * LazyMapsAPILoaderConfig}.\r\n */\r\nexport const LAZY_MAPS_API_CONFIG = new OpaqueToken('angular2-google-maps LAZY_MAPS_API_CONFIG');\r\n\r\n/**\r\n * Configuration for the {@link LazyMapsAPILoader}.\r\n */\r\nexport interface LazyMapsAPILoaderConfigLiteral {\r\n  /**\r\n   * The Google Maps API Key (see:\r\n   * https://developers.google.com/maps/documentation/javascript/get-api-key)\r\n   */\r\n  apiKey?: string;\r\n\r\n  /**\r\n   * The Google Maps client ID (for premium plans).\r\n   * When you have a Google Maps APIs Premium Plan license, you must authenticate\r\n   * your application with either an API key or a client ID.\r\n   * The Google Maps API will fail to load if both a client ID and an API key are included.\r\n   */\r\n  clientId?: string;\r\n\r\n  /**\r\n   * The Google Maps channel name (for premium plans).\r\n   * A channel parameter is an optional parameter that allows you to track usage under your client\r\n   * ID by assigning a distinct channel to each of your applications.\r\n   */\r\n  channel?: string;\r\n\r\n  /**\r\n   * Google Maps API version.\r\n   */\r\n  apiVersion?: string;\r\n\r\n  /**\r\n   * Host and Path used for the `<script>` tag.\r\n   */\r\n  hostAndPath?: string;\r\n\r\n  /**\r\n   * Protocol used for the `<script>` tag.\r\n   */\r\n  protocol?: GoogleMapsScriptProtocol;\r\n\r\n  /**\r\n   * Defines which Google Maps libraries should get loaded.\r\n   */\r\n  libraries?: string[];\r\n\r\n  /**\r\n   * The default bias for the map behavior is US.\r\n   * If you wish to alter your application to serve different map tiles or bias the\r\n   * application, you can overwrite the default behavior (US) by defining a `region`.\r\n   * See https://developers.google.com/maps/documentation/javascript/basics#Region\r\n   */\r\n  region?: string;\r\n\r\n  /**\r\n   * The Google Maps API uses the browser's preferred language when displaying\r\n   * textual information. If you wish to overwrite this behavior and force the API\r\n   * to use a given language, you can use this setting.\r\n   * See https://developers.google.com/maps/documentation/javascript/basics#Language\r\n   */\r\n  language?: string;\r\n}\r\n\r\n\r\nexport class LazyMapsAPILoader extends MapsAPILoader {\r\n  private _scriptLoadingPromise: Promise<void>;\r\n  private _config: LazyMapsAPILoaderConfigLiteral;\r\n  private _windowRef: WindowRef;\r\n  private _documentRef: DocumentRef;\r\n\r\n  constructor( config: any, w: WindowRef, d: DocumentRef) {\r\n    super();\r\n    this._config = config || {};\r\n    this._windowRef = w;\r\n    this._documentRef = d;\r\n  }\r\n\r\n  load(): Promise<void> {\r\n    if (this._scriptLoadingPromise) {\r\n      return this._scriptLoadingPromise;\r\n    }\r\n\r\n    const script = this._documentRef.getNativeDocument().createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.async = true;\r\n    script.defer = true;\r\n    const callbackName: string = `angular2GoogleMapsLazyMapsAPILoader`;\r\n    script.src = this._getScriptSrc(callbackName);\r\n\r\n    this._scriptLoadingPromise = new Promise<void>((resolve: Function, reject: Function) => {\r\n      (<any>this._windowRef.getNativeWindow())[callbackName] = () => { resolve(); };\r\n\r\n      script.onerror = (error: Event) => { reject(error); };\r\n    });\r\n\r\n    this._documentRef.getNativeDocument().body.appendChild(script);\r\n    return this._scriptLoadingPromise;\r\n  }\r\n\r\n  private _getScriptSrc(callbackName: string): string {\r\n    let protocolType: GoogleMapsScriptProtocol =\r\n        (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;\r\n    let protocol: string;\r\n\r\n    switch (protocolType) {\r\n      case GoogleMapsScriptProtocol.AUTO:\r\n        protocol = '';\r\n        break;\r\n      case GoogleMapsScriptProtocol.HTTP:\r\n        protocol = 'http:';\r\n        break;\r\n      case GoogleMapsScriptProtocol.HTTPS:\r\n        protocol = 'https:';\r\n        break;\r\n    }\r\n\r\n    const hostAndPath: string = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\r\n    const queryParams: {[key: string]: string | Array<string>} = {\r\n      v: this._config.apiVersion || '3',\r\n      callback: callbackName,\r\n      key: this._config.apiKey,\r\n      client: this._config.clientId,\r\n      channel: this._config.channel,\r\n      libraries: this._config.libraries,\r\n      region: this._config.region,\r\n      language: this._config.language\r\n    };\r\n    const params: string =\r\n        Object.keys(queryParams)\r\n            .filter((k: string) => queryParams[k] != null)\r\n            .filter((k: string) => {\r\n              // remove empty arrays\r\n              return !Array.isArray(queryParams[k]) ||\r\n                  (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\r\n            })\r\n            .map((k: string) => {\r\n              // join arrays as comma seperated strings\r\n              let i = queryParams[k];\r\n              if (Array.isArray(i)) {\r\n                return {key: k, value: i.join(',')};\r\n              }\r\n              return {key: k, value: queryParams[k]};\r\n            })\r\n            .map((entry: {key: string, value: string}) => { return `${entry.key}=${entry.value}`; })\r\n            .join('&');\r\n    return `${protocol}//${hostAndPath}?${params}`;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LAZY_MAPS_API_CONFIG, ] }, ]},\n{type: WindowRef, },\n{type: DocumentRef, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}