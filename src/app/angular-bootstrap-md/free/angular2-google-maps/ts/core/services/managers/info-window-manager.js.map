{"version":3,"sources":["../../../../../../../../src/app/typescripts/free/angular2-google-maps/ts/core/services/managers/info-window-manager.ts"],"names":[],"mappings":"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","file":"info-window-manager.js","sourceRoot":"","sourcesContent":["import { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport {Injectable, NgZone} from '@angular/core';\r\n\r\nimport {SebmGoogleMapInfoWindow} from '../../directives/google-map-info-window';\r\n\r\nimport {GoogleMapsAPIWrapper} from '../google-maps-api-wrapper';\r\nimport {InfoWindow, InfoWindowOptions} from '../google-maps-types';\r\nimport {MarkerManager} from './marker-manager';\r\n\r\n\r\nexport class InfoWindowManager {\r\n  private _infoWindows: Map<SebmGoogleMapInfoWindow, Promise<InfoWindow>> =\r\n      new Map<SebmGoogleMapInfoWindow, Promise<InfoWindow>>();\r\n\r\n  constructor(\r\n      private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone,\r\n      private _markerManager: MarkerManager) {}\r\n\r\n  deleteInfoWindow(infoWindow: SebmGoogleMapInfoWindow): Promise<void> {\r\n    const iWindow = this._infoWindows.get(infoWindow);\r\n    if (iWindow == null) {\r\n      // info window already deleted\r\n      return Promise.resolve();\r\n    }\r\n    return iWindow.then((i: InfoWindow) => {\r\n      return this._zone.run(() => {\r\n        i.close();\r\n        this._infoWindows.delete(infoWindow);\r\n      });\r\n    });\r\n  }\r\n\r\n  setPosition(infoWindow: SebmGoogleMapInfoWindow): Promise<void> {\r\n    return this._infoWindows.get(infoWindow).then((i: InfoWindow) => i.setPosition({\r\n      lat: infoWindow.latitude,\r\n      lng: infoWindow.longitude\r\n    }));\r\n  }\r\n\r\n  setZIndex(infoWindow: SebmGoogleMapInfoWindow): Promise<void> {\r\n    return this._infoWindows.get(infoWindow)\r\n        .then((i: InfoWindow) => i.setZIndex(infoWindow.zIndex));\r\n  }\r\n\r\n  open(infoWindow: SebmGoogleMapInfoWindow): Promise<void> {\r\n    return this._infoWindows.get(infoWindow).then((w) => {\r\n      if (infoWindow.hostMarker != null) {\r\n        return this._markerManager.getNativeMarker(infoWindow.hostMarker).then((marker) => {\r\n          return this._mapsWrapper.getNativeMap().then((map) => w.open(map, marker));\r\n        });\r\n      }\r\n      return this._mapsWrapper.getNativeMap().then((map) => w.open(map));\r\n    });\r\n  }\r\n\r\n  close(infoWindow: SebmGoogleMapInfoWindow): Promise<void> {\r\n    return this._infoWindows.get(infoWindow).then((w) => w.close());\r\n  }\r\n\r\n  setOptions(infoWindow: SebmGoogleMapInfoWindow, options: InfoWindowOptions) {\r\n    return this._infoWindows.get(infoWindow).then((i: InfoWindow) => i.setOptions(options));\r\n  }\r\n\r\n  addInfoWindow(infoWindow: SebmGoogleMapInfoWindow) {\r\n    const options: InfoWindowOptions = {\r\n      content: infoWindow.content,\r\n      maxWidth: infoWindow.maxWidth,\r\n      zIndex: infoWindow.zIndex,\r\n    };\r\n    if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\r\n      options.position = {lat: infoWindow.latitude, lng: infoWindow.longitude};\r\n    }\r\n    const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\r\n    this._infoWindows.set(infoWindow, infoWindowPromise);\r\n  }\r\n\r\n   /**\r\n    * Creates a Google Maps event listener for the given InfoWindow as an Observable\r\n    */\r\n  createEventObservable<T>(eventName: string, infoWindow: SebmGoogleMapInfoWindow): Observable<T> {\r\n    return Observable.create((observer: Observer<T>) => {\r\n      this._infoWindows.get(infoWindow).then((i: InfoWindow) => {\r\n        i.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\r\n      });\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: GoogleMapsAPIWrapper, },\n{type: NgZone, },\n{type: MarkerManager, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}