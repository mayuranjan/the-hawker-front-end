{"version":3,"sources":["../../../../src/app/typescripts/free/buttons/radioDirective.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,UAAA,EAAY,WAAA,EAAa,UAAA,EAAY,YAAA,EAAc,KAAA,EAAc,MAAO,eAAA,CAAgB;AAC5G,OAAO,EAAwB,iBAAA,EAAkB,MAAO,gBAAA,CAAiB;AAEzE,MAAM,CAAC,IAAM,4BAAA,GAAoC;IAC7C,OAAO,EAAE,iBAAA;IACT,WAAW,EAAE,UAAA,CAAW,cAAM,OAAA,oBAAA,EAAA,CAAA,CAAqB;IACnD,KAAK,EAAE,IAAA;CACV,CAAC;AAEF;;;GAGG;AAEH;IAmCI,8BAAmB,EAAc;QAjC1B,aAAQ,GAAO,QAAQ,CAAC,SAAS,CAAC;QAClC,cAAS,GAAO,QAAQ,CAAC,SAAS,CAAC;QAiCxC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACf,CAAC;IAtBD,sBAAW,0CAAQ;aAAnB;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC;QACxC,CAAC;;;OAAA;IAGM,sCAAO,GAAd;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QAC3B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,CAAC;QAED,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAMM,uCAAQ,GAAf;QACI,IAAI,CAAC,WAAW,GAAG,OAAO,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC;IAC/D,CAAC;IAEM,qCAAM,GAAb;QACI,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAED,uBAAuB;IACvB,gBAAgB;IACT,yCAAU,GAAjB,UAAkB,KAAU;QACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAEM,+CAAgB,GAAvB,UAAwB,EAAO;QAC3B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IAEM,gDAAiB,GAAxB,UAAyB,EAAO;QAC5B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACxB,CAAC;IAeL,2BAAC;AAAD,CA1EA,AA0EC;;AAdM,+BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,4BAA4B,CAAC,EAAE,EAAG,EAAE;CACnG,CAAC;AACF,kBAAkB;AACX,mCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,EAF6F,CAE7F,CAAC;AACK,mCAAc,GAA2C;IAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC9B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACjC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,cAAc,EAAG,EAAE,EAAE;IAC9D,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAE;CACtD,CAAC","file":"radioDirective.js","sourceRoot":"","sourcesContent":["import { Directive, ElementRef, HostBinding, forwardRef, HostListener, Input, OnInit } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => ButtonRadioDirective),\r\n    multi: true\r\n};\r\n\r\n/**\r\n * Create radio buttons or groups of buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n\r\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\r\n\r\n    public onChange:any = Function.prototype;\r\n    public onTouched:any = Function.prototype;\r\n\r\n    /** Radio button value, will be set to `ngModel` */\r\n     public btnRadio:any;\r\n    /** If `true` â€” radio button can be unchecked */\r\n     public uncheckable:boolean;\r\n    /** Current value of radio component or group */\r\n     public value:any;\r\n\r\n    protected el: ElementRef;\r\n\r\n    \r\n    public get isActive(): boolean {\r\n        return this.btnRadio === this.value;\r\n    }\r\n\r\n    \r\n    public onClick(): void {\r\n        if (this.el.nativeElement.attributes.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (this.uncheckable && this.btnRadio === this.value) {\r\n            this.value = undefined;\r\n        } else {\r\n            this.value = this.btnRadio;\r\n        }\r\n\r\n        this.onTouched();\r\n        this.onChange(this.value);\r\n    }\r\n\r\n    public constructor(el: ElementRef) {\r\n      this.el = el;\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        this.uncheckable = typeof this.uncheckable !== 'undefined';\r\n    }\r\n\r\n    public onBlur(): void {\r\n        this.onTouched();\r\n    }\r\n\r\n    // ControlValueAccessor\r\n    // model -> view\r\n    public writeValue(value: any): void {\r\n        this.value = value;\r\n    }\r\n\r\n    public registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    public registerOnTouched(fn: any): void {\r\n        this.onTouched = fn;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{ selector: '[btnRadio]', providers: [RADIO_CONTROL_VALUE_ACCESSOR] }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'btnRadio': [{ type: Input },],\n'uncheckable': [{ type: Input },],\n'value': [{ type: Input },],\n'isActive': [{ type: HostBinding, args: ['class.active', ] },],\n'onClick': [{ type: HostListener, args: ['click', ] },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}