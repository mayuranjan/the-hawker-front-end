{"version":3,"sources":["../../../../src/app/typescripts/free/inputs/equalValidatorDirective.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,UAAA,EAAY,SAAA,EAAU,MAAO,eAAA,CAAgB;AACjE,OAAO,EAA8B,aAAA,EAAc,MAAO,gBAAA,CAAiB;AAI3E;IACI,wBAAqB,aAAqB,EACjC,OAAe;QADH,kBAAa,GAAb,aAAa,CAAQ;QACjC,YAAO,GAAP,OAAO,CAAQ;IAExB,CAAC;IAED,sBAAY,qCAAS;aAArB;YACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YAChC,MAAM,CAAC,IAAI,CAAC,OAAO,KAAK,MAAM,GAAG,IAAI,GAAE,KAAK,CAAC;QACjD,CAAC;;;OAAA;IAED,iCAAQ,GAAR,UAAS,CAAkB;QAC3B,oCAAoC;QAClC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;QAElB,gCAAgC;QAC9B,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEzC,kBAAkB;QAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;YAAC,MAAM,CAAC;gBAC3B,aAAa,EAAE,KAAK;aACvB,CAAA;QAEH,4BAA4B;QAC1B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACpC,OAAO,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;gBAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACzD,CAAC;QAEN,8BAA8B;QACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,SAAS,CAAC;gBACT,aAAa,EAAE,KAAK;aACvB,CAAC,CAAA;QACX,CAAC;QAEI,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAcL,qBAAC;AAAD,CAnDA,AAmDC;;AAbM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,wFAAwF;gBAClG,SAAS,EAAE;oBACP,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,cAAc,EAAd,CAAc,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE;iBACzF;aACJ,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,eAAe,EAAG,EAAE,EAAG,EAAC;IACjF,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,SAAS,EAAG,EAAE,EAAG,EAAC;CAC1E,EAH6F,CAG7F,CAAC","file":"equalValidatorDirective.js","sourceRoot":"","sourcesContent":["import { Directive, forwardRef, Attribute } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\n\r\n\r\nexport class EqualValidator implements Validator {\r\n    constructor(  public validateEqual: string, \r\n    \t public reverse: string) {\r\n\r\n    }\r\n\r\n    private get isReverse() {\r\n        if (!this.reverse) return false;\r\n        return this.reverse === 'true' ? true: false;\r\n    }\r\n\r\n    validate(c: AbstractControl): { [key: string]: any } {\r\n    // self value (e.g. retype password)\r\n    \t\tlet v = c.value;\r\n\r\n    // control value (e.g. password)\r\n    \t\tlet e = c.root.get(this.validateEqual);\r\n\r\n    // value not equal\r\n    \t\tif (e && v !== e.value) return {\r\n        \t\tvalidateEqual: false\r\n    \t\t}\r\n    \t\t\r\n    // value equal and reverse\t\t\r\n    \t\tif (e && v === e.value && this.isReverse) {\r\n            \tdelete e.errors['validateEqual'];\r\n            \tif (!Object.keys(e.errors).length) e.setErrors(null);\r\n        \t}\r\n\r\n    // value not equal and reverse\r\n        \tif (e && v !== e.value && this.isReverse) {\r\n           \t\te.setErrors({\r\n                validateEqual: false\r\n            })\r\n \t\t}\r\n\r\n        return null;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[validateEqual][formControlName],[validateEqual][formControl],[validateEqual][ngModel]',\r\n    providers: [\r\n        { provide: NG_VALIDATORS, useExisting: forwardRef(() => EqualValidator), multi: true }\r\n    ]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Attribute, args: ['validateEqual', ] }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['reverse', ] }, ]},\n];\n}\r\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}