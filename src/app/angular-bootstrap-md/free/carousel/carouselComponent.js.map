{"version":3,"sources":["../../../../src/app/typescripts/free/carousel/carouselComponent.ts"],"names":[],"mappings":"AAAA,sBAAC;AAED;;;;GAIG;AACH;;;;;;GAMG;AAEH,OAAO,EAAE,SAAA,EAAW,KAAA,EAAkB,MAAA,EAAQ,YAAA,EAAc,UAAA,EAAY,YAAA,EAAoE,MAAO,eAAA,CAAgB;AAEnK,OAAO,EAAE,KAAA,EAAO,UAAA,EAAW,MAAO,UAAA,CAAW;AAE7C,OAAO,EAAE,cAAA,EAAe,MAAO,kBAAA,CAAmB;AAElD,MAAM,CAAN,IAAY,SAA+B;AAA3C,WAAY,SAAA;IAAU,+CAAE,CAAA;IAAQ,yCAAA,CAAA;IAAM,yCAAA,CAAA;AAAA,CAAK,EAA/B,SAAA,KAAA,SAAA,QAA+B;AAE3C;;GAEG;AAEH;IA2EE,2BAAmB,MAAsB,EAAE,EAAc;QAnEjD,SAAI,GAAW,EAAE,CAAC;QAI1B,4GAA4G;QACpG,sBAAiB,GAAuB,IAAI,YAAY,CAAM,KAAK,CAAC,CAAC;QAgDnE,YAAO,GAA+B,IAAI,UAAU,EAAkB,CAAC;QAOvE,cAAS,GAAY,KAAK,CAAC;QAC3B,OAAE,GAAe,IAAI,CAAC;QAO9B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC5B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACf,CAAC;IA7DD,sBAAW,0CAAW;aAKtB;YACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC;QAClC,CAAC;QATD,wDAAwD;aAExD,UAAuB,KAAa;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,KAAK,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBAC9D,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACtB,CAAC;QACH,CAAC;;;OAAA;IAOM,2CAAe,GAAtB;QACE,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,IAAI,qBAAqB,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAEd,CAAC;IAEM,qCAAS,GAAhB;QACG,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,IAAI,qBAAqB,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAGD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,kCAAM,GAAN,UAAO,KAAU;QACf,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;IACzD,CAAC;IAMD,sBAAW,uCAAQ;QAJnB;;WAEG;aAEH;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;aACD,UAAoB,KAAa;YAC/B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC;;;OAJA;IAOD,sBAAW,qCAAM;aAAjB;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAChC,CAAC;;;OAAA;IAOD,sBAAW,oCAAK;aAAhB;YACE,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;QAClB,CAAC;;;OAAA;IAOM,uCAAW,GAAlB;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAED;;;OAGG;IACI,oCAAQ,GAAf,UAAgB,KAAqB;QACnC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC,CAAC;YAClC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;OAGG;IACI,uCAAW,GAAlB,UAAmB,KAAqB;QAAxC,iBA6BC;QA5BC,IAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAE7C,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,KAAK,QAAQ,CAAC,CAAC,CAAC;YAE1C,2BAA2B;YAC3B,IAAI,gBAAc,GAAW,KAAK,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC5B,2GAA2G;gBAC3G,yFAAyF;gBACzF,gBAAc,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,QAAQ;oBAChD,IAAI,CAAC,MAAM,GAAG,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;YACnC,CAAC;YACD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAE9B,6DAA6D;YAC7D,UAAU,CAAC;gBACT,KAAI,CAAC,OAAO,CAAC,gBAAc,CAAC,CAAC;YAC/B,CAAC,EAAE,CAAC,CAAC,CAAC;QACR,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC9B,IAAM,mBAAiB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;YACtD,UAAU,CAAC;gBACT,kEAAkE;gBAClE,KAAI,CAAC,mBAAmB,GAAG,mBAAiB,CAAC;gBAC7C,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAI,CAAC,mBAAmB,CAAC,CAAC;YACxD,CAAC,EAAE,CAAC,CAAC,CAAC;QAER,CAAC;IACH,CAAC;IAED;;;OAGG;IACI,qCAAS,GAAhB,UAAiB,KAAsB;QAAvC,iBAYC;QAZgB,sBAAA,EAAA,aAAsB;QACrC,IAAI,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC1D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;QACzF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;QAC7E,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,IAAI,eAAe,CAAC,CAAC,CAAC;YAChC,UAAU,CAAC;gBACT,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACpE,CAAC,EAAE,GAAG,CAAC,CAAC;QACV,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACpE,CAAC;QACD,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED;;;OAGG;IACI,yCAAa,GAApB,UAAqB,KAAsB;QAA3C,iBAYC;QAZoB,sBAAA,EAAA,aAAsB;QACzC,IAAI,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC1D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,qBAAqB,CAAC,CAAC;QAC1F,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;QAC7E,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,IAAI,eAAe,CAAC,CAAC,CAAC;YAChC,UAAU,CAAC;gBACT,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACpE,CAAC,EAAE,GAAG,CAAC,CAAC;QACV,CAAC;QAAC,IAAI,CAAC,CAAC;YACL,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACrE,CAAC;QACD,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED;;;OAGG;IACI,uCAAW,GAAlB,UAAmB,KAAa;QAC9B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC3B,CAAC;IAED;;OAEG;IACI,gCAAI,GAAX;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC;IACH,CAAC;IAED;;OAEG;IACI,iCAAK,GAAZ;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC;IACH,CAAC;IAED;;;OAGG;IACI,gDAAoB,GAA3B;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,UAAC,KAAqB,IAAK,OAAA,KAAK,CAAC,MAAM,EAAZ,CAAY,CAAC,CAAC;IACzE,CAAC;IAED;;;;OAIG;IACI,kCAAM,GAAb,UAAc,KAAa;QACzB,MAAM,CAAC,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACK,8CAAkB,GAA1B,UAA2B,SAAoB,EAAE,KAAc;QAC7D,IAAI,cAAc,GAAW,IAAI,CAAC,mBAAmB,CAAC;QAEtD,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,SAAS,KAAK,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7F,MAAM,CAAC,KAAK,CAAC,CAAC;QAChB,CAAC;QAED,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAClB,KAAK,SAAS,CAAC,IAAI;gBACjB,oHAAoH;gBACpH,6FAA6F;gBAC7F,6DAA6D;gBAE7D,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;oBACxC,cAAc,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;oBAC9C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;oBAC5F,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;oBAC1F,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;gBAG9F,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,EAAE,CAAA,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBACvB,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;oBAC9C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,cAAc,GAAG,CAAC,CAAC;wBACnB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;wBACjG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;wBAC1F,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;oBAC9F,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,SAAS,CAAC,IAAI;gBACjB,sHAAsH;gBACtH,mFAAmF;gBACnF,mFAAmF;gBAEjF,EAAE,CAAA,CAAC,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC,CAAC;oBAChC,cAAc,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;oBAC9C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,qBAAqB,CAAC,CAAC;oBAC7F,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;gBAC5F,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,EAAE,CAAA,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBACvB,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;oBAC9C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,qBAAqB,CAAC,CAAC;wBAC3F,cAAc,GAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;wBAC1C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;oBAC9F,CAAC;gBACH,CAAC;gBAEH,KAAK,CAAC;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACzC,CAAC;QACD,MAAM,CAAC,cAAc,CAAC;IACxB,CAAC;IAED;;;;OAIG;IACK,mCAAO,GAAf,UAAgB,KAAa;QAC3B,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,MAAM,CAAC;QACT,CAAC;QACD,IAAI,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC9D,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,YAAY,CAAC,MAAM,GAAG,KAAK,CAAC;QAC9B,CAAC;QACD,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;YACjC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,wCAAY,GAApB;QAAA,iBAeC;QAdC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC9B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,eAAe,GAAG,WAAW,CAChC;gBACE,IAAI,SAAS,GAAG,CAAC,KAAI,CAAC,QAAQ,CAAC;gBAC/B,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,QAAQ,CAAC,IAAI,SAAS,GAAG,CAAC,IAAI,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;oBACnF,KAAI,CAAC,SAAS,EAAE,CAAC;gBACnB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,KAAI,CAAC,KAAK,EAAE,CAAC;gBACf,CAAC;YACH,CAAC,EACD,QAAQ,CAAC,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,sCAAU,GAAlB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACzB,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACpC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC;QAChC,CAAC;IACH,CAAC;IAES,oCAAQ,GAAlB,UAAmB,EAAO,EAAE,SAAc;QACxC,EAAE,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC;YACf,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC1C,IAAI;YACF,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC;IAC/E,CAAC;IAES,oCAAQ,GAAlB,UAAmB,EAAO,EAAE,SAAc;QACxC,EAAE,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC;YACf,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC9B,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;YAAC,EAAE,CAAC,SAAS,IAAI,GAAG,GAAG,SAAS,CAAC;IAC1E,CAAC;IAES,uCAAW,GAArB,UAAsB,EAAO,EAAE,SAAc;QAC3C,EAAE,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC;YACf,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACjC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,GAAG,GAAG,IAAI,MAAM,CAAC,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC,CAAC;YACxD,EAAE,CAAC,SAAS,GAAC,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;IAEA,2CAAe,GAAf,UAAgB,KAAoB;QACnC,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjB,EAAE,CAAA,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,CAAC;YAED,EAAE,CAAA,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC;QACH,CAAC;IAEH,CAAC;IACA,iCAAK,GAAL;QACC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC;IAoDH,wBAAC;AAAD,CAjaA,AAiaC;;AAlDM,4BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,u2DAwBT;gBACD,IAAI,EAAE;oBACJ,YAAY,EAAE,SAAS;oBACvB,YAAY,EAAE,QAAQ;iBACvB;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,gCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,cAAc,GAAG;IACxB,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,EAH6F,CAG7F,CAAC;AACK,gCAAc,GAA2C;IAChE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC9B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,MAAM,EAAG,EAAE,EAAE;IAC5C,mBAAmB,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;IACxC,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACjC,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC9B,iBAAiB,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAG,EAAE,EAAE;IAC3E,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAG,EAAE,EAAE;CAChE,CAAC","file":"carouselComponent.js","sourceRoot":"","sourcesContent":["// todo: add animation\r\n\r\n/***\r\n * pause (not yet supported) (?string='hover') - event group name which pauses the cycling of the carousel, if hover pauses on mouseenter and resumes on mouseleave\r\n keyboard (not yet supported) (?boolean=true) - if false carousel will not react to keyboard events\r\n note: swiping not yet supported\r\n */\r\n/****\r\n * Problems:\r\n * 1) if we set an active slide via model changes, .active class remains on a current slide.\r\n * 2) if we have only one slide, we shouldn't show prev/next nav buttons\r\n * 3) if first or last slide is active and noWrap is true, there should be \"disabled\" class on the nav buttons.\r\n * 4) default interval should be equal 5000\r\n */\r\n\r\nimport { Component, Input, OnDestroy, Output, EventEmitter, ElementRef, HostListener, trigger, state, style, transition, animate, keyframes } from '@angular/core';\r\n\r\nimport { isBs3, LinkedList } from '../utils';\r\nimport { SlideComponent } from './slideComponent';\r\nimport { CarouselConfig } from './carouselConfig';\r\n\r\nexport enum Direction {UNKNOWN, NEXT, PREV}\r\n\r\n/**\r\n * Base element to create carousel\r\n */\r\n\r\nexport class CarouselComponent implements OnDestroy {\r\n  /** If `true` — carousel will not cycle continuously and will have hard stops (prevent looping) */\r\n   public noWrap: boolean;\r\n  /**  If `true` — will disable pausing on carousel mouse hover */\r\n   public noPause: boolean;\r\n\r\n   public keyboard: boolean;\r\n\r\n   public type: String = '';\r\n\r\n  protected _currentActiveSlide: number;\r\n\r\n  /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\r\n   public activeSlideChange: EventEmitter <any> = new EventEmitter<any>(false);\r\n\r\n  /** Index of currently displayed slide(started for 0) */\r\n  \r\n  public set activeSlide(index: number) {\r\n    if (this._slides.length && index !== this._currentActiveSlide) {\r\n      this._select(index);\r\n    }\r\n  }\r\n  public get activeSlide(): number {\r\n    return this._currentActiveSlide;\r\n  }\r\n  \r\n  protected _interval: number;\r\n\r\n  public checkNavigation() {\r\n    if(this.type == 'carousel-multi-item') {\r\n      return false;\r\n    }\r\n    return true;\r\n      \r\n  }\r\n\r\n  public checkDots() {\r\n     if(this.type == 'carousel-thumbnails') {\r\n      return false;\r\n    } \r\n\r\n\r\n    return true;\r\n  }\r\n\r\n  getImg(slide: any) {\r\n    return slide.el.nativeElement.querySelector('img').src;\r\n  }\r\n\r\n  /**\r\n   * Delay of item cycling in milliseconds. If false, carousel won't cycle automatically.\r\n   */\r\n  \r\n  public get interval(): number {\r\n    return this._interval;\r\n  }\r\n  public set interval(value: number) {\r\n    this._interval = value;\r\n    this.restartTimer();\r\n  }\r\n\r\n  protected _slides: LinkedList<SlideComponent> = new LinkedList<SlideComponent>();\r\n  public get slides(): SlideComponent[] {\r\n    return this._slides.toArray();\r\n  }\r\n\r\n  protected currentInterval: any;\r\n  protected isPlaying: boolean;\r\n  protected destroyed: boolean = false;\r\n  protected el: ElementRef = null;\r\n\r\n  public get isBs4():boolean {\r\n    return !isBs3();\r\n  }\r\n\r\n  public constructor(config: CarouselConfig, el: ElementRef) {\r\n    Object.assign(this, config);\r\n    this.el = el;\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.destroyed = true;\r\n  }\r\n\r\n  /**\r\n   * Adds new slide. If this slide is first in collection - set it as active and starts auto changing\r\n   * @param slide\r\n   */\r\n  public addSlide(slide: SlideComponent): void {\r\n    this._slides.add(slide);\r\n    if (this._slides.length === 1) {\r\n      this._currentActiveSlide = void 0;\r\n      this.activeSlide = 0;\r\n      this.play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes specified slide. If this slide is active - will roll to another slide\r\n   * @param slide\r\n   */\r\n  public removeSlide(slide: SlideComponent): void {\r\n    const remIndex = this._slides.indexOf(slide);\r\n\r\n    if (this._currentActiveSlide === remIndex) {\r\n\r\n      // removing of active slide\r\n      let nextSlideIndex: number = void 0;\r\n      if (this._slides.length > 1) {\r\n        // if this slide last - will roll to first slide, if noWrap flag is FALSE or to previous, if noWrap is TRUE\r\n        // in case, if this slide in middle of collection, index of next slide is same to removed\r\n        nextSlideIndex = !this.isLast(remIndex) ? remIndex :\r\n          this.noWrap ? remIndex - 1 : 0;\r\n      }\r\n      this._slides.remove(remIndex);\r\n\r\n      // prevents exception with changing some value after checking\r\n      setTimeout(() => {\r\n        this._select(nextSlideIndex);\r\n      }, 0);\r\n    } else {\r\n      this._slides.remove(remIndex);\r\n      const currentSlideIndex = this.getCurrentSlideIndex();\r\n      setTimeout(() => {\r\n        // after removing, need to actualize index of current active slide\r\n        this._currentActiveSlide = currentSlideIndex;\r\n        this.activeSlideChange.emit(this._currentActiveSlide);\r\n      }, 0);\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rolling to next slide\r\n   * @param force: {boolean} if true - will ignore noWrap flag\r\n   */\r\n  public nextSlide(force: boolean = false) {\r\n    let next = this.findNextSlideIndex(Direction.NEXT, force); \r\n    this.classAdd(this._slides.get(this.activeSlide).el.nativeElement, 'carousel-item-left');   \r\n    this.classAdd(this._slides.get(next).el.nativeElement, 'carousel-item-next');\r\n    if(this.type == 'carousel-item') {\r\n      setTimeout(() => {\r\n        this.activeSlide = this.findNextSlideIndex(Direction.NEXT, force);\r\n      }, 500);\r\n    } else {\r\n      this.activeSlide = this.findNextSlideIndex(Direction.NEXT, force);\r\n    }\r\n    this.restartTimer();\r\n  }\r\n\r\n  /**\r\n   * Rolling to previous slide\r\n   * @param force: {boolean} if true - will ignore noWrap flag\r\n   */\r\n  public previousSlide(force: boolean = false): void {\r\n    let prev = this.findNextSlideIndex(Direction.PREV, force); \r\n    this.classAdd(this._slides.get(this.activeSlide).el.nativeElement, 'carousel-item-right');   \r\n    this.classAdd(this._slides.get(prev).el.nativeElement, 'carousel-item-prev');\r\n    if(this.type == 'carousel-item') {\r\n      setTimeout(() => {\r\n        this.activeSlide = this.findNextSlideIndex(Direction.PREV, force);\r\n      }, 500);\r\n    } else {\r\n       this.activeSlide = this.findNextSlideIndex(Direction.PREV, force);\r\n    }\r\n    this.restartTimer();\r\n  }\r\n\r\n  /**\r\n   * Rolling to specified slide\r\n   * @param index: {number} index of slide, which must be shown\r\n   */\r\n  public selectSlide(index: number): void {\r\n    this.activeSlide = index;\r\n  }\r\n\r\n  /**\r\n   * Starts a auto changing of slides\r\n   */\r\n  public play(): void {\r\n    if (!this.isPlaying) {\r\n      this.isPlaying = true;\r\n      this.restartTimer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops a auto changing of slides\r\n   */\r\n  public pause(): void {\r\n    if (!this.noPause) {\r\n      this.isPlaying = false;\r\n      this.resetTimer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and returns index of currently displayed slide\r\n   * @returns {number}\r\n   */\r\n  public getCurrentSlideIndex(): number {\r\n    return this._slides.findIndex((slide: SlideComponent) => slide.active);\r\n  }\r\n\r\n  /**\r\n   * Defines, whether the specified index is last in collection\r\n   * @param index\r\n   * @returns {boolean}\r\n   */\r\n  public isLast(index: number): boolean {\r\n    return index + 1 >= this._slides.length;\r\n  }\r\n\r\n  /**\r\n   * Defines next slide index, depending of direction\r\n   * @param direction: Direction(UNKNOWN|PREV|NEXT)\r\n   * @param force: {boolean} if TRUE - will ignore noWrap flag, else will return undefined if next slide require wrapping\r\n   * @returns {any}\r\n   */\r\n  private findNextSlideIndex(direction: Direction, force: boolean): number {\r\n    let nextSlideIndex: number = this._currentActiveSlide;\r\n\r\n    if (!force && (this.isLast(this.activeSlide) && direction !== Direction.PREV && this.noWrap)) {\r\n      return void 0;\r\n    }\r\n\r\n    switch (direction) {\r\n      case Direction.NEXT:\r\n        // if this is last slide, not force, looping is disabled and need to going forward - select current slide, as a next\r\n        // nextSlideIndex = (!this.isLast(this._currentActiveSlide)) ? this._currentActiveSlide + 1 :\r\n        //   (!force && this.noWrap ) ? this._currentActiveSlide : 0;\r\n\r\n        if(!this.isLast(this._currentActiveSlide)) {\r\n            nextSlideIndex = this._currentActiveSlide + 1;\r\n            this.removeClass(this._slides.get(nextSlideIndex-1).el.nativeElement, 'carousel-item-left');\r\n            this.removeClass(this._slides.get(nextSlideIndex).el.nativeElement, 'carousel-item-left');  \r\n            this.removeClass(this._slides.get(nextSlideIndex).el.nativeElement, 'carousel-item-next');  \r\n    \r\n             \r\n        } else {\r\n            if(!force && this.noWrap) {\r\n                nextSlideIndex = this._currentActiveSlide;\r\n            } else {\r\n                nextSlideIndex = 0;\r\n                this.removeClass(this._slides.get(this._slides.length-1).el.nativeElement, 'carousel-item-left');\r\n                this.removeClass(this._slides.get(nextSlideIndex).el.nativeElement, 'carousel-item-left');  \r\n                this.removeClass(this._slides.get(nextSlideIndex).el.nativeElement, 'carousel-item-next');\r\n            }\r\n        }\r\n        break;\r\n      case Direction.PREV:\r\n        // if this is first slide, not force, looping is disabled and need to going backward - select current slide, as a next\r\n        // nextSlideIndex = (this._currentActiveSlide > 0) ? this._currentActiveSlide - 1 :\r\n        //   (!force && this.noWrap ) ? this._currentActiveSlide : this._slides.length - 1;\r\n\r\n          if(this._currentActiveSlide > 0) {\r\n            nextSlideIndex = this._currentActiveSlide - 1;\r\n            this.removeClass(this._slides.get(nextSlideIndex+1).el.nativeElement, 'carousel-item-right');\r\n            this.removeClass(this._slides.get(nextSlideIndex).el.nativeElement, 'carousel-item-prev'); \r\n          } else {\r\n            if(!force && this.noWrap) {\r\n                nextSlideIndex = this._currentActiveSlide;\r\n            } else {\r\n                this.removeClass(this._slides.get(nextSlideIndex).el.nativeElement, 'carousel-item-right');\r\n                nextSlideIndex =  this._slides.length - 1;\r\n                this.removeClass(this._slides.get(nextSlideIndex).el.nativeElement, 'carousel-item-prev');\r\n            }\r\n          }\r\n\r\n        break;\r\n      default:\r\n        throw new Error('Unknown direction');\r\n    }\r\n    return nextSlideIndex;\r\n  }\r\n\r\n  /**\r\n   * Sets a slide, which specified through index, as active\r\n   * @param index\r\n   * @private\r\n   */\r\n  private _select(index: number): void {\r\n    if (isNaN(index)) {\r\n      this.pause();\r\n      return;\r\n    }\r\n    let currentSlide = this._slides.get(this._currentActiveSlide);\r\n    if (currentSlide) {\r\n      currentSlide.active = false;\r\n    }\r\n    let nextSlide = this._slides.get(index);\r\n    if (nextSlide) {\r\n      this._currentActiveSlide = index;\r\n      nextSlide.active = true;\r\n      this.activeSlide = index;\r\n      this.activeSlideChange.emit(index);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts loop of auto changing of slides\r\n   */\r\n  private restartTimer(): any {\r\n    this.resetTimer();\r\n    let interval = +this.interval;\r\n    if (!isNaN(interval) && interval > 0) {\r\n      this.currentInterval = setInterval(\r\n        () => {\r\n          let nInterval = +this.interval;\r\n          if (this.isPlaying && !isNaN(this.interval) && nInterval > 0 && this.slides.length) {\r\n            this.nextSlide();\r\n          } else {\r\n            this.pause();\r\n          }\r\n        },\r\n        interval);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops loop of auto changing of slides\r\n   */\r\n  private resetTimer(): void {\r\n    if (this.currentInterval) {\r\n      clearInterval(this.currentInterval);\r\n      this.currentInterval = void 0;\r\n    }\r\n  }\r\n\r\n  protected hasClass(el: any, className: any) {\r\n    if (el.classList)\r\n      return el.classList.contains(className);\r\n    else\r\n      return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\r\n  }\r\n\r\n  protected classAdd(el: any, className: any) {\r\n    if (el.classList)\r\n      el.classList.add(className);\r\n    else if (!this.hasClass(el, className)) el.className += \" \" + className;\r\n  }\r\n\r\n  protected removeClass(el: any, className: any) {\r\n    if (el.classList)\r\n      el.classList.remove(className);\r\n    else if (this.hasClass(el, className)) {\r\n      var reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\r\n      el.className=el.className.replace(reg, ' ');\r\n    }\r\n  }\r\n\r\n   keyboardControl(event: KeyboardEvent) {\r\n    if(this.keyboard) {\r\n      if(event.keyCode == 39) {\r\n        this.nextSlide();\r\n      } \r\n\r\n      if(event.keyCode == 37) {\r\n        this.previousSlide();\r\n      }\r\n    }\r\n      \r\n  }\r\n   focus() {\r\n    this.el.nativeElement.focus();\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'carousel',\r\n  template: `\r\n    <div tabindex=\"0\" (mouseenter)=\"pause()\" (mouseleave)=\"play()\" (mouseup)=\"play()\" class=\"carousel slide {{ type }}\">\r\n      <div class=\"controls-top\" *ngIf=\"slides.length > 1 && !checkNavigation()\">\r\n          <a class=\"btn-floating btn-small\" [class.disabled]=\"activeSlide === 0 && noWrap\" (click)=\"previousSlide()\"><i class=\"fa fa-chevron-left\"></i></a>\r\n          <a class=\"btn-floating btn-small\" (click)=\"nextSlide()\" [class.disabled]=\"isLast(activeSlide) && noWrap\"><i class=\"fa fa-chevron-right\"></i></a>\r\n      </div>\r\n      <ol class=\"carousel-indicators\" *ngIf=\"slides.length > 1 && checkDots()\">\r\n         <li *ngFor=\"let slidez of slides; let i = index;\" [class.active]=\"slidez.active === true\" (click)=\"selectSlide(i)\"></li>\r\n      </ol>\r\n      <ol class=\"carousel-indicators\" *ngIf=\"slides.length > 1 && !checkDots()\">\r\n         <li *ngFor=\"let slidez of slides; let i = index;\" [class.active]=\"slidez.active === true\" (click)=\"selectSlide(i)\">\r\n            <img class=\"img-fluid\" src=\"{{ getImg(slidez) }}\">\r\n         </li>\r\n      </ol>\r\n      <div class=\"carousel-inner\"><ng-content></ng-content></div>\r\n      <a class=\"left carousel-control carousel-control-prev\" [class.disabled]=\"activeSlide === 0 && noWrap\" (click)=\"previousSlide()\" *ngIf=\"slides.length > 1 && checkNavigation()\">\r\n        <span class=\"icon-prev carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n        <span *ngIf=\"isBs4\" class=\"sr-only\">Previous</span>\r\n      </a>\r\n      <a class=\"right carousel-control carousel-control-next\" (click)=\"nextSlide()\" [class.disabled]=\"isLast(activeSlide) && noWrap\" *ngIf=\"slides.length > 1 && checkNavigation()\">\r\n        <span class=\"icon-next carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n        <span class=\"sr-only\">Next</span>\r\n      </a>\r\n    </div>\r\n  `,\r\n  host: {\r\n    'mouseenter': 'pause()',\r\n    'mouseleave': 'play()'\r\n  }\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CarouselConfig, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'noWrap': [{ type: Input },],\n'noPause': [{ type: Input },],\n'keyboard': [{ type: Input },],\n'type': [{ type: Input, args: ['type', ] },],\n'activeSlideChange': [{ type: Output },],\n'activeSlide': [{ type: Input },],\n'interval': [{ type: Input },],\n'keyboardControl': [{ type: HostListener, args: ['keyup', ['$event'], ] },],\n'focus': [{ type: HostListener, args: ['click', ['$event'], ] },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}